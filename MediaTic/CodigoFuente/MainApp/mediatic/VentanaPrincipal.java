package mediatic;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.KeyboardFocusManager;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Transparency;
import java.awt.color.ColorSpace;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.ColorConvertOp;
import java.awt.image.ColorModel;
import java.awt.image.ComponentColorModel;
import java.awt.image.ConvolveOp;
import java.awt.image.DataBuffer;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.LookupTable;
import java.awt.image.RescaleOp;
import java.awt.image.WritableRaster;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.IOException;
import java.util.Arrays;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.activation.UnsupportedDataTypeException;
import javax.imageio.ImageIO;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.LineEvent;
import javax.sound.sampled.LineListener;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import static javax.swing.JOptionPane.showMessageDialog;
import javax.swing.filechooser.FileNameExtensionFilter;
import sm.image.KernelProducer;
import sm.image.LookupTableProducer;
import sm.sound.SMClipPlayer;
import sm.sound.SMRecorder;
import sm.sound.SMSoundRecorder;
import sm.vpc.imagen.ImagePiOp;
import sm.vpc.imagen.LookupTableCreator;
import sm.vpc.imagen.MaxMinOp;
import sm.vpc.imagen.SepiaOp;
import sm.vpc.iu.Canvas;
import sm.vpc.iu.ListCeldaColor;
import uk.co.caprica.vlcj.filter.VideoFileFilter;

/**
 * Clase encargada del "layout" principal. Encargada de la gestión de ventanas, selección de herramientas/opciones,
 * la E/S de los archivos y del sonido.
 * @author Víctor Padilla
 * @version 1.0
 * 
 */
public class VentanaPrincipal extends javax.swing.JFrame {
    /**
     * Dialogo para seleccionar las dimensiones
     */
    protected VentanaDimensionImagen ventDim;
    
    /**
     * BufferedImage auxiliar para realizar
     * operaciones como el cambio de brillo
     */
    protected BufferedImage imgFuente;
    
    /**
     * Objeto reproductor de audio
     */
    protected SMClipPlayer player = null;
    
    /**
     * Objeto grabador de audio
     */
    protected SMRecorder recorder = null;
    
    /**
     * Objeto auxiliar para poder seleccionar
     * el fichero despues de grabar el audio.
     */
    protected File ficheroGrabacion = null;
    
    /**
     * Lista de los colores disponibles para dibujar
     */
    protected final Vector<Color> listaColores = new Vector(); 
    
    /**
     * Variable para actualizar los datos del sonido
     */
    protected ActuSonidoHebra ActuSonido;
    
    /**
     * Constructor por defecto de la ventana principal. Inicializa la lista de colores y los componentes necesarios
     * de la ventana (botones, comboboxes, manejadores de eventos...).
     */
    public VentanaPrincipal() {
        this.listaColores.add(Color.BLACK); this.listaColores.add(Color.BLUE); this.listaColores.add(Color.RED);
        this.listaColores.add(Color.YELLOW); this.listaColores.add(Color.WHITE); this.listaColores.add(Color.ORANGE);
        this.listaColores.add(Color.GREEN); this.listaColores.add(Color.PINK);
        
        initComponents();
        
        ventDim = new VentanaDimensionImagen(this, rootPaneCheckingEnabled);
        
        colorCBRelleno.setSelectedIndex(0);
        colorCBTrazo.setSelectedIndex(0);
        
        KeyboardFocusManager focusManager = KeyboardFocusManager.getCurrentKeyboardFocusManager();
        focusManager.addPropertyChangeListener(new FocusManagerListener());
                
        this.setTitle("MediaTic 1.0");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grupoHerramientas = new javax.swing.ButtonGroup();
        jSeparator1 = new javax.swing.JSeparator();
        barraInferior = new javax.swing.JPanel();
        infoPanel = new javax.swing.JPanel();
        herramientaText = new javax.swing.JLabel();
        mousePosicionText = new javax.swing.JLabel();
        imagenPanel = new javax.swing.JPanel();
        duplicarBoton = new javax.swing.JButton();
        jSeparator9 = new javax.swing.JToolBar.Separator();
        jSeparator6 = new javax.swing.JSeparator();
        brilloBajoLabel = new javax.swing.JLabel();
        brilloSlider = new javax.swing.JSlider();
        brilloAltoLabel = new javax.swing.JLabel();
        jSeparator11 = new javax.swing.JToolBar.Separator();
        convolucionCB = new javax.swing.JComboBox<>();
        jSeparator10 = new javax.swing.JToolBar.Separator();
        contrasteNormalBoton = new javax.swing.JButton();
        iluminarBoton = new javax.swing.JButton();
        oscurecimientoBoton = new javax.swing.JButton();
        jSeparator7 = new javax.swing.JToolBar.Separator();
        senoBoton = new javax.swing.JButton();
        sepiaBoton = new javax.swing.JButton();
        negativoBoton = new javax.swing.JButton();
        ImagenPiBoton = new javax.swing.JButton();
        absolutoBoton = new javax.swing.JButton();
        minimoBoton = new javax.swing.JButton();
        jSeparator8 = new javax.swing.JToolBar.Separator();
        descomponerBandasBoton = new javax.swing.JButton();
        espacioColorCB = new javax.swing.JComboBox<>();
        jSeparator12 = new javax.swing.JToolBar.Separator();
        escalarLabel = new javax.swing.JLabel();
        aumentarBoton = new javax.swing.JButton();
        disminuirBoton = new javax.swing.JButton();
        jSeparator13 = new javax.swing.JToolBar.Separator();
        rotacionLabel = new javax.swing.JLabel();
        rotacionSlider = new javax.swing.JSlider();
        rotacion90Boton = new javax.swing.JButton();
        rotacion180Boton = new javax.swing.JButton();
        rotacion270Boton = new javax.swing.JButton();
        barraHerramientas = new javax.swing.JToolBar();
        nuevoArchivoBoton = new javax.swing.JButton();
        abrirArchivoBoton = new javax.swing.JButton();
        guardarArchivoBoton = new javax.swing.JButton();
        webcamBoton = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        puntoHerramienta = new javax.swing.JToggleButton();
        trazoHerramienta = new javax.swing.JToggleButton();
        lineaHerramienta = new javax.swing.JToggleButton();
        rectanguloHerramienta = new javax.swing.JToggleButton();
        elipseHerramienta = new javax.swing.JToggleButton();
        quadHerramienta = new javax.swing.JToggleButton();
        areaBoton = new javax.swing.JToggleButton();
        jSeparator15 = new javax.swing.JToolBar.Separator();
        editarHerramienta = new javax.swing.JToggleButton();
        jSeparator14 = new javax.swing.JToolBar.Separator();
        rellenoLabel = new javax.swing.JLabel();
        colorCBRelleno = new JComboBox(listaColores);
        colorCBRelleno.setRenderer(new ListCeldaColor());
        trazoLabel = new javax.swing.JLabel();
        colorCBTrazo = new JComboBox(listaColores);
        colorCBTrazo.setRenderer(new ListCeldaColor());
        grosorSpinner = new javax.swing.JSpinner();
        jSeparator5 = new javax.swing.JToolBar.Separator();
        discontHerramienta = new javax.swing.JToggleButton();
        rellenoHerramienta = new javax.swing.JToggleButton();
        degradadoHerramienta = new javax.swing.JButton();
        alisadoHerramienta = new javax.swing.JToggleButton();
        jSeparator16 = new javax.swing.JToolBar.Separator();
        alphaLabel = new javax.swing.JLabel();
        transparenciaHerramienta = new javax.swing.JSlider();
        jSeparator4 = new javax.swing.JToolBar.Separator();
        sonidoBarraHerramienta = new javax.swing.JToolBar();
        reproducirBoton = new javax.swing.JButton();
        pausarBoton = new javax.swing.JButton();
        barraTiempoSonido = new javax.swing.JProgressBar();
        listaReproduccionCB = new javax.swing.JComboBox<>();
        grabarBoton = new javax.swing.JButton();
        escritorioTrabajo = new javax.swing.JDesktopPane();
        barraMenu = new javax.swing.JMenuBar();
        archivoMenu = new javax.swing.JMenu();
        nuevoArchivo = new javax.swing.JMenuItem();
        abrirArchivo = new javax.swing.JMenuItem();
        guardarArchivo = new javax.swing.JMenuItem();
        webcamMenu = new javax.swing.JMenuItem();
        verMenu = new javax.swing.JMenu();
        verBarraEstado = new javax.swing.JCheckBoxMenuItem();
        verBarraAtributos = new javax.swing.JCheckBoxMenuItem();
        verBarraFormas = new javax.swing.JCheckBoxMenuItem();
        verBarraSonido = new javax.swing.JCheckBoxMenuItem();
        verBarraImagen = new javax.swing.JCheckBoxMenuItem();
        imagenMenu = new javax.swing.JMenu();
        cambiarTamMenu = new javax.swing.JMenuItem();
        menuBrillo = new javax.swing.JMenuItem();
        menuConvolucion = new javax.swing.JMenuItem();
        menuLookUp = new javax.swing.JMenuItem();
        menuSeno = new javax.swing.JMenuItem();
        combinarBandasMenu = new javax.swing.JMenuItem();
        convertirColorMenu = new javax.swing.JMenuItem();
        colorMenu = new javax.swing.JMenu();
        selectorColorMenu = new javax.swing.JMenuItem();
        ayudaMenu = new javax.swing.JMenu();
        aboutMeMenu = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        barraInferior.setLayout(new java.awt.BorderLayout());

        infoPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        infoPanel.setAlignmentX(0.1F);
        infoPanel.setFocusable(false);
        infoPanel.setLayout(new java.awt.BorderLayout());

        herramientaText.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        infoPanel.add(herramientaText, java.awt.BorderLayout.LINE_START);
        infoPanel.add(mousePosicionText, java.awt.BorderLayout.LINE_END);

        barraInferior.add(infoPanel, java.awt.BorderLayout.PAGE_END);

        imagenPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        duplicarBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/duplicate.png"))); // NOI18N
        duplicarBoton.setToolTipText("Duplicar imagen de la ventana activa");
        duplicarBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                duplicarBotonActionPerformed(evt);
            }
        });
        imagenPanel.add(duplicarBoton);
        imagenPanel.add(jSeparator9);
        imagenPanel.add(jSeparator6);

        brilloBajoLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/baseline_brightness_low_black_18dp.png"))); // NOI18N
        imagenPanel.add(brilloBajoLabel);

        brilloSlider.setMaximum(255);
        brilloSlider.setMinimum(-255);
        brilloSlider.setToolTipText("Selector del brillo de la imagen (lineal)");
        brilloSlider.setValue(0);
        brilloSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                brilloSliderStateChanged(evt);
            }
        });
        brilloSlider.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                brilloSliderFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                brilloSliderFocusLost(evt);
            }
        });
        imagenPanel.add(brilloSlider);

        brilloAltoLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/baseline_brightness_high_black_18dp.png"))); // NOI18N
        imagenPanel.add(brilloAltoLabel);
        imagenPanel.add(jSeparator11);

        convolucionCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Media", "Binomial", "Enfoque", "Relieve", "Laplaciano" }));
        convolucionCB.setToolTipText("Aplicar el filtro que se elija");
        convolucionCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                convolucionCBActionPerformed(evt);
            }
        });
        imagenPanel.add(convolucionCB);
        imagenPanel.add(jSeparator10);

        contrasteNormalBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/contraste.png"))); // NOI18N
        contrasteNormalBoton.setToolTipText("Aumentar el contraste");
        contrasteNormalBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contrasteNormalBotonActionPerformed(evt);
            }
        });
        imagenPanel.add(contrasteNormalBoton);

        iluminarBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/iluminar.png"))); // NOI18N
        iluminarBoton.setToolTipText("Aumentar el brillo (Logarítmica)");
        iluminarBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iluminarBotonActionPerformed(evt);
            }
        });
        imagenPanel.add(iluminarBoton);

        oscurecimientoBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/oscurecer.png"))); // NOI18N
        oscurecimientoBoton.setToolTipText("Disminuir el brillo (Potencia)");
        oscurecimientoBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oscurecimientoBotonActionPerformed(evt);
            }
        });
        imagenPanel.add(oscurecimientoBoton);
        imagenPanel.add(jSeparator7);

        senoBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/sinusoidal.png"))); // NOI18N
        senoBoton.setToolTipText("Aplicar efecto tipo Seno");
        senoBoton.setPreferredSize(new java.awt.Dimension(62, 35));
        senoBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                senoBotonActionPerformed(evt);
            }
        });
        imagenPanel.add(senoBoton);

        sepiaBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/sepia.png"))); // NOI18N
        sepiaBoton.setToolTipText("Aplicar filtro sepia");
        sepiaBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sepiaBotonActionPerformed(evt);
            }
        });
        imagenPanel.add(sepiaBoton);

        negativoBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/negativo.png"))); // NOI18N
        negativoBoton.setToolTipText("Aplicar un filtro negativo");
        negativoBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                negativoBotonActionPerformed(evt);
            }
        });
        imagenPanel.add(negativoBoton);

        ImagenPiBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/pi.png"))); // NOI18N
        ImagenPiBoton.setToolTipText("Aplicar filtro comp. a comp. que realiza producto modular por Pi");
        ImagenPiBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ImagenPiBotonActionPerformed(evt);
            }
        });
        imagenPanel.add(ImagenPiBoton);

        absolutoBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/absoluto.png"))); // NOI18N
        absolutoBoton.setToolTipText("Aplica un filtro del tipo LookUp con una funcion absoluto");
        absolutoBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                absolutoBotonActionPerformed(evt);
            }
        });
        imagenPanel.add(absolutoBoton);

        minimoBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/minmax.png"))); // NOI18N
        minimoBoton.setToolTipText("Filtro pixel a pixel que aplica una media entre el min y el max y con carga del propio componente");
        minimoBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minimoBotonActionPerformed(evt);
            }
        });
        imagenPanel.add(minimoBoton);
        imagenPanel.add(jSeparator8);

        descomponerBandasBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/bandas.png"))); // NOI18N
        descomponerBandasBoton.setToolTipText("Descomponer la imagen en Bandas");
        descomponerBandasBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                descomponerBandasBotonActionPerformed(evt);
            }
        });
        imagenPanel.add(descomponerBandasBoton);

        espacioColorCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "RGB", "YCC", "GREY" }));
        espacioColorCB.setToolTipText("Conversion a espacio de Color");
        espacioColorCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                espacioColorCBActionPerformed(evt);
            }
        });
        imagenPanel.add(espacioColorCB);
        imagenPanel.add(jSeparator12);

        escalarLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/baseline_photo_size_select_large_black_18dp.png"))); // NOI18N
        imagenPanel.add(escalarLabel);

        aumentarBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/aumentar.png"))); // NOI18N
        aumentarBoton.setToolTipText("Aumenta el tamaño de la imagen");
        aumentarBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aumentarBotonActionPerformed(evt);
            }
        });
        imagenPanel.add(aumentarBoton);

        disminuirBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/disminuir.png"))); // NOI18N
        disminuirBoton.setToolTipText("Disminuye el tamaño de la imagen");
        disminuirBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disminuirBotonActionPerformed(evt);
            }
        });
        imagenPanel.add(disminuirBoton);
        imagenPanel.add(jSeparator13);

        rotacionLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/baseline_rotate_90_degrees_ccw_black_18dp.png"))); // NOI18N
        imagenPanel.add(rotacionLabel);

        rotacionSlider.setMaximum(360);
        rotacionSlider.setSnapToTicks(true);
        rotacionSlider.setToolTipText("Rota la imagen (hasta 360º)");
        rotacionSlider.setValue(0);
        rotacionSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rotacionSliderStateChanged(evt);
            }
        });
        rotacionSlider.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                rotacionSliderFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                rotacionSliderFocusLost(evt);
            }
        });
        imagenPanel.add(rotacionSlider);

        rotacion90Boton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rotacion90.png"))); // NOI18N
        rotacion90Boton.setToolTipText("Rota la imagen 90º");
        rotacion90Boton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotacion90BotonActionPerformed(evt);
            }
        });
        imagenPanel.add(rotacion90Boton);

        rotacion180Boton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rotacion180.png"))); // NOI18N
        rotacion180Boton.setToolTipText("Rota la imagen 180º");
        rotacion180Boton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotacion180BotonActionPerformed(evt);
            }
        });
        imagenPanel.add(rotacion180Boton);

        rotacion270Boton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rotacion270.png"))); // NOI18N
        rotacion270Boton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotacion270BotonActionPerformed(evt);
            }
        });
        imagenPanel.add(rotacion270Boton);

        barraInferior.add(imagenPanel, java.awt.BorderLayout.CENTER);

        getContentPane().add(barraInferior, java.awt.BorderLayout.PAGE_END);

        barraHerramientas.setRollover(true);

        nuevoArchivoBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/nuevo.png"))); // NOI18N
        nuevoArchivoBoton.setToolTipText("Crea un nueva venta en blanco");
        nuevoArchivoBoton.setFocusable(false);
        nuevoArchivoBoton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        nuevoArchivoBoton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        nuevoArchivoBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoArchivoBotonActionPerformed(evt);
            }
        });
        barraHerramientas.add(nuevoArchivoBoton);

        abrirArchivoBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/abrir.png"))); // NOI18N
        abrirArchivoBoton.setToolTipText("Abre un archivo y lo carga dependiendo del medio");
        abrirArchivoBoton.setFocusable(false);
        abrirArchivoBoton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        abrirArchivoBoton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        abrirArchivoBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirArchivoBotonActionPerformed(evt);
            }
        });
        barraHerramientas.add(abrirArchivoBoton);

        guardarArchivoBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/guardar.png"))); // NOI18N
        guardarArchivoBoton.setToolTipText("Guarda la ventana seleccionada en una imagen");
        guardarArchivoBoton.setFocusable(false);
        guardarArchivoBoton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        guardarArchivoBoton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        guardarArchivoBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarArchivoBotonActionPerformed(evt);
            }
        });
        barraHerramientas.add(guardarArchivoBoton);

        webcamBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Camara.png"))); // NOI18N
        webcamBoton.setToolTipText("Abre una ventana nueva con video de la webcam por defecto");
        webcamBoton.setFocusable(false);
        webcamBoton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        webcamBoton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        webcamBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                webcamBotonActionPerformed(evt);
            }
        });
        barraHerramientas.add(webcamBoton);

        jSeparator2.setMinimumSize(new java.awt.Dimension(20, 10));
        jSeparator2.setSeparatorSize(new java.awt.Dimension(20, 10));
        barraHerramientas.add(jSeparator2);

        grupoHerramientas.add(puntoHerramienta);
        puntoHerramienta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/punto.png"))); // NOI18N
        puntoHerramienta.setToolTipText(" Herramienta punto (cuadrado)");
        puntoHerramienta.setFocusable(false);
        puntoHerramienta.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        puntoHerramienta.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        puntoHerramienta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                puntoHerramientaActionPerformed(evt);
            }
        });
        barraHerramientas.add(puntoHerramienta);

        grupoHerramientas.add(trazoHerramienta);
        trazoHerramienta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/trazolibre.png"))); // NOI18N
        trazoHerramienta.setToolTipText("Herramienta para dibujar un trazo libre");
        trazoHerramienta.setFocusable(false);
        trazoHerramienta.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        trazoHerramienta.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        trazoHerramienta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trazoHerramientaActionPerformed(evt);
            }
        });
        barraHerramientas.add(trazoHerramienta);

        grupoHerramientas.add(lineaHerramienta);
        lineaHerramienta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/linea.png"))); // NOI18N
        lineaHerramienta.setToolTipText("Dibuja una línea desde un primer punto seleccionado hasta donde se arrastre el ratón");
        lineaHerramienta.setFocusable(false);
        lineaHerramienta.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lineaHerramienta.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        lineaHerramienta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lineaHerramientaActionPerformed(evt);
            }
        });
        barraHerramientas.add(lineaHerramienta);

        grupoHerramientas.add(rectanguloHerramienta);
        rectanguloHerramienta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rectangulo.png"))); // NOI18N
        rectanguloHerramienta.setToolTipText("Herramienta para dibujar un cuadrado");
        rectanguloHerramienta.setFocusable(false);
        rectanguloHerramienta.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        rectanguloHerramienta.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        rectanguloHerramienta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rectanguloHerramientaActionPerformed(evt);
            }
        });
        barraHerramientas.add(rectanguloHerramienta);

        grupoHerramientas.add(elipseHerramienta);
        elipseHerramienta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/elipse.png"))); // NOI18N
        elipseHerramienta.setToolTipText("Herramienta para dibujar una elipse");
        elipseHerramienta.setFocusable(false);
        elipseHerramienta.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        elipseHerramienta.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        elipseHerramienta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                elipseHerramientaActionPerformed(evt);
            }
        });
        barraHerramientas.add(elipseHerramienta);

        grupoHerramientas.add(quadHerramienta);
        quadHerramienta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/quadcurve.png"))); // NOI18N
        quadHerramienta.setToolTipText("Herramienta para dibujar una curva cuadrática");
        quadHerramienta.setFocusable(false);
        quadHerramienta.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        quadHerramienta.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        quadHerramienta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quadHerramientaActionPerformed(evt);
            }
        });
        barraHerramientas.add(quadHerramienta);

        grupoHerramientas.add(areaBoton);
        areaBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/area.png"))); // NOI18N
        areaBoton.setToolTipText("Herramienta para dibujar una área especial");
        areaBoton.setFocusable(false);
        areaBoton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        areaBoton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        areaBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                areaBotonActionPerformed(evt);
            }
        });
        barraHerramientas.add(areaBoton);

        jSeparator15.setSeparatorSize(new java.awt.Dimension(20, 10));
        barraHerramientas.add(jSeparator15);

        grupoHerramientas.add(editarHerramienta);
        editarHerramienta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/seleccion.png"))); // NOI18N
        editarHerramienta.setToolTipText("Herramienta para recolocar figuras");
        editarHerramienta.setFocusable(false);
        editarHerramienta.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        editarHerramienta.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        editarHerramienta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarHerramientaActionPerformed(evt);
            }
        });
        barraHerramientas.add(editarHerramienta);

        jSeparator14.setSeparatorSize(new java.awt.Dimension(20, 10));
        barraHerramientas.add(jSeparator14);

        rellenoLabel.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        rellenoLabel.setText(" Relleno ");
        barraHerramientas.add(rellenoLabel);

        colorCBRelleno.setToolTipText("Cambia el color del relleno");
        colorCBRelleno.setMaximumSize(new java.awt.Dimension(50, 50));
        colorCBRelleno.setMinimumSize(new java.awt.Dimension(33, 50));
        colorCBRelleno.setPreferredSize(new java.awt.Dimension(55, 36));
        colorCBRelleno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorCBRellenoActionPerformed(evt);
            }
        });
        barraHerramientas.add(colorCBRelleno);

        trazoLabel.setFont(new java.awt.Font("Consolas", 1, 14)); // NOI18N
        trazoLabel.setText(" Trazo");
        trazoLabel.setPreferredSize(new java.awt.Dimension(55, 16));
        barraHerramientas.add(trazoLabel);

        colorCBTrazo.setToolTipText("Cambia el color del trazo");
        colorCBTrazo.setMaximumSize(new java.awt.Dimension(50, 50));
        colorCBTrazo.setMinimumSize(new java.awt.Dimension(33, 50));
        colorCBTrazo.setPreferredSize(new java.awt.Dimension(55, 36));
        colorCBTrazo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorCBTrazoActionPerformed(evt);
            }
        });
        barraHerramientas.add(colorCBTrazo);

        grosorSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, null, 1));
        grosorSpinner.setToolTipText("Cambia el grosor del trazo");
        grosorSpinner.setMaximumSize(new java.awt.Dimension(50, 36));
        grosorSpinner.setPreferredSize(new java.awt.Dimension(50, 36));
        grosorSpinner.setRequestFocusEnabled(false);
        grosorSpinner.setValue(1);
        grosorSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                grosorSpinnerStateChanged(evt);
            }
        });
        barraHerramientas.add(grosorSpinner);

        jSeparator5.setSeparatorSize(new java.awt.Dimension(30, 10));
        barraHerramientas.add(jSeparator5);

        discontHerramienta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/discontinua.png"))); // NOI18N
        discontHerramienta.setToolTipText("Dibuja el trazo discontinuo");
        discontHerramienta.setFocusable(false);
        discontHerramienta.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        discontHerramienta.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        discontHerramienta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                discontHerramientaActionPerformed(evt);
            }
        });
        barraHerramientas.add(discontHerramienta);

        rellenoHerramienta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rellenar.png"))); // NOI18N
        rellenoHerramienta.setToolTipText("Activar el relleno de las figuras");
        rellenoHerramienta.setFocusable(false);
        rellenoHerramienta.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        rellenoHerramienta.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        rellenoHerramienta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rellenoHerramientaActionPerformed(evt);
            }
        });
        barraHerramientas.add(rellenoHerramienta);

        degradadoHerramienta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/gradiente.png"))); // NOI18N
        degradadoHerramienta.setToolTipText("Elegir y aplicar degradado");
        degradadoHerramienta.setFocusable(false);
        degradadoHerramienta.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        degradadoHerramienta.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        degradadoHerramienta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                degradadoHerramientaActionPerformed(evt);
            }
        });
        barraHerramientas.add(degradadoHerramienta);

        alisadoHerramienta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/alisar.png"))); // NOI18N
        alisadoHerramienta.setToolTipText("Activa el suavizado de bordes");
        alisadoHerramienta.setFocusable(false);
        alisadoHerramienta.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        alisadoHerramienta.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        alisadoHerramienta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alisadoHerramientaActionPerformed(evt);
            }
        });
        barraHerramientas.add(alisadoHerramienta);
        barraHerramientas.add(jSeparator16);

        alphaLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/alpha.png"))); // NOI18N
        alphaLabel.setMinimumSize(new java.awt.Dimension(22, 18));
        alphaLabel.setPreferredSize(new java.awt.Dimension(22, 18));
        barraHerramientas.add(alphaLabel);

        transparenciaHerramienta.setMaximum(255);
        transparenciaHerramienta.setToolTipText("Ajustar la trasnparencia");
        transparenciaHerramienta.setValue(255);
        transparenciaHerramienta.setMaximumSize(new java.awt.Dimension(75, 16));
        transparenciaHerramienta.setPreferredSize(new java.awt.Dimension(75, 16));
        transparenciaHerramienta.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                transparenciaHerramientaStateChanged(evt);
            }
        });
        barraHerramientas.add(transparenciaHerramienta);

        jSeparator4.setSeparatorSize(new java.awt.Dimension(60, 10));
        barraHerramientas.add(jSeparator4);

        sonidoBarraHerramienta.setRollover(true);
        sonidoBarraHerramienta.setAlignmentX(0.1F);

        reproducirBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/play24x24.png"))); // NOI18N
        reproducirBoton.setToolTipText("Play/Pause");
        reproducirBoton.setFocusable(false);
        reproducirBoton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        reproducirBoton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        reproducirBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reproducirBotonActionPerformed(evt);
            }
        });
        sonidoBarraHerramienta.add(reproducirBoton);

        pausarBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/stop24x24.png"))); // NOI18N
        pausarBoton.setToolTipText("Stop");
        pausarBoton.setFocusable(false);
        pausarBoton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        pausarBoton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        pausarBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pausarBotonActionPerformed(evt);
            }
        });
        sonidoBarraHerramienta.add(pausarBoton);
        sonidoBarraHerramienta.add(barraTiempoSonido);

        listaReproduccionCB.setMaximumSize(new java.awt.Dimension(300, 500));
        listaReproduccionCB.setPreferredSize(new java.awt.Dimension(60, 26));
        sonidoBarraHerramienta.add(listaReproduccionCB);

        grabarBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/record24x24.png"))); // NOI18N
        grabarBoton.setToolTipText("Grabar un audio");
        grabarBoton.setFocusable(false);
        grabarBoton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        grabarBoton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        grabarBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grabarBotonActionPerformed(evt);
            }
        });
        sonidoBarraHerramienta.add(grabarBoton);

        barraHerramientas.add(sonidoBarraHerramienta);

        getContentPane().add(barraHerramientas, java.awt.BorderLayout.PAGE_START);

        escritorioTrabajo.setName(""); // NOI18N

        javax.swing.GroupLayout escritorioTrabajoLayout = new javax.swing.GroupLayout(escritorioTrabajo);
        escritorioTrabajo.setLayout(escritorioTrabajoLayout);
        escritorioTrabajoLayout.setHorizontalGroup(
            escritorioTrabajoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1748, Short.MAX_VALUE)
        );
        escritorioTrabajoLayout.setVerticalGroup(
            escritorioTrabajoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 653, Short.MAX_VALUE)
        );

        getContentPane().add(escritorioTrabajo, java.awt.BorderLayout.CENTER);

        archivoMenu.setText("Archivo");

        nuevoArchivo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        nuevoArchivo.setText("Nuevo");
        nuevoArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoArchivoActionPerformed(evt);
            }
        });
        archivoMenu.add(nuevoArchivo);

        abrirArchivo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        abrirArchivo.setText("Abrir");
        abrirArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirArchivoActionPerformed(evt);
            }
        });
        archivoMenu.add(abrirArchivo);

        guardarArchivo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        guardarArchivo.setText("Guardar");
        guardarArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarArchivoActionPerformed(evt);
            }
        });
        archivoMenu.add(guardarArchivo);

        webcamMenu.setText("Abrir Webcam");
        webcamMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                webcamMenuActionPerformed(evt);
            }
        });
        archivoMenu.add(webcamMenu);

        barraMenu.add(archivoMenu);

        verMenu.setText("Ver");

        verBarraEstado.setSelected(true);
        verBarraEstado.setText("Barra de estado");
        verBarraEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verBarraEstadoActionPerformed(evt);
            }
        });
        verMenu.add(verBarraEstado);

        verBarraAtributos.setSelected(true);
        verBarraAtributos.setText("Barra de atributos");
        verBarraAtributos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verBarraAtributosActionPerformed(evt);
            }
        });
        verMenu.add(verBarraAtributos);

        verBarraFormas.setSelected(true);
        verBarraFormas.setText("Barra de Formas");
        verBarraFormas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verBarraFormasActionPerformed(evt);
            }
        });
        verMenu.add(verBarraFormas);

        verBarraSonido.setSelected(true);
        verBarraSonido.setText("Ver Barra de Sonido");
        verBarraSonido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verBarraSonidoActionPerformed(evt);
            }
        });
        verMenu.add(verBarraSonido);

        verBarraImagen.setSelected(true);
        verBarraImagen.setText("Ver Barra Imagen");
        verBarraImagen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verBarraImagenActionPerformed(evt);
            }
        });
        verMenu.add(verBarraImagen);

        barraMenu.add(verMenu);

        imagenMenu.setText("Imagen");

        cambiarTamMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_MASK));
        cambiarTamMenu.setText("Cambiar tamaño del Marco");
        cambiarTamMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cambiarTamMenuActionPerformed(evt);
            }
        });
        imagenMenu.add(cambiarTamMenu);

        menuBrillo.setText("Cambiar brillo de la imágen");
        menuBrillo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuBrilloActionPerformed(evt);
            }
        });
        imagenMenu.add(menuBrillo);

        menuConvolucion.setText("Aplicar convolución a la imágen");
        menuConvolucion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuConvolucionActionPerformed(evt);
            }
        });
        imagenMenu.add(menuConvolucion);

        menuLookUp.setText("Aplicar operación LookUp");
        menuLookUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuLookUpActionPerformed(evt);
            }
        });
        imagenMenu.add(menuLookUp);

        menuSeno.setText("Aplicar función Seno");
        menuSeno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSenoActionPerformed(evt);
            }
        });
        imagenMenu.add(menuSeno);

        combinarBandasMenu.setText("Descomponer en bandas la imagen ");
        combinarBandasMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combinarBandasMenuActionPerformed(evt);
            }
        });
        imagenMenu.add(combinarBandasMenu);

        convertirColorMenu.setText("Cambiar a espacio de color YCC");
        convertirColorMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                convertirColorMenuActionPerformed(evt);
            }
        });
        imagenMenu.add(convertirColorMenu);

        barraMenu.add(imagenMenu);

        colorMenu.setText("Color");

        selectorColorMenu.setText("Personalizar Color");
        selectorColorMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectorColorMenuActionPerformed(evt);
            }
        });
        colorMenu.add(selectorColorMenu);

        barraMenu.add(colorMenu);

        ayudaMenu.setText("Ayuda");

        aboutMeMenu.setText("Sobre Mi");
        aboutMeMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMeMenuActionPerformed(evt);
            }
        });
        ayudaMenu.add(aboutMeMenu);

        barraMenu.add(ayudaMenu);

        setJMenuBar(barraMenu);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Crea una nueva ventana del tipo VentanaInternaImagen con una imagen en blanco de fondo. Ademas inicializa
     * las herramientas y componentes a su estado básico.
     */
    protected void nuevaVentana(){
        VentanaInternaImagen vi = new VentanaInternaImagen(this, ventDim.getAncho(), ventDim.getAlto());
       
        escritorioTrabajo.add(vi);
        vi.setVisible(true);
        
        BufferedImage img;
        img = new BufferedImage(ventDim.getAncho(), ventDim.getAlto(),BufferedImage.TYPE_INT_RGB);
        
        Graphics2D g2d = img.createGraphics();
        
        g2d.setColor(Color.white);
        g2d.fill(new Rectangle(new Dimension(ventDim.getAncho(), ventDim.getAlto())));
        
        vi.getLienzo().setImagen(img);
        //vi.getLienzo().setTool("punto");
        
        vi.setTitle("Nueva [RGB]");
        
        puntoHerramienta.doClick();
        
        transparenciaHerramienta.setValue(255);
        grosorSpinner.setValue(1);
    }
    
    /**
     * Adquiere la imagen correspondiente a un Canvas y la descompone en bandas correspondientes a su 
     * espacio de color. Asigna el resultado a tantas VentanaInternaImagen como bandas haya. 
     */
    
    protected void descomponerEnBandas(){
        VentanaInternaImagen vi_original = (VentanaInternaImagen) (escritorioTrabajo.getSelectedFrame());
    
        if (vi_original != null) {
            BufferedImage img = vi_original.getLienzo().getImagen();

            if(img != null){
                int NumBandas = img.getColorModel().getNumColorComponents();

                for (int iBanda = 0; iBanda < NumBandas; iBanda++){
                    //Creamos el modelo de color de la nueva imagen basado en un espcio de color GRAY
                    ColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_GRAY);
                    ComponentColorModel cm = new ComponentColorModel(cs, false, false, Transparency.OPAQUE, DataBuffer.TYPE_BYTE);

                    //Creamos el nuevo raster a partir del raster de la imagen original
                    int bandList[] = {iBanda};
                    WritableRaster bandRaster = (WritableRaster)img.getRaster().createWritableChild(0,0,
                    img.getWidth(), img.getHeight(), 0, 0, bandList);

                    //Creamos una nueva imagen que contiene como raster el correspondiente a la banda
                    BufferedImage imgBanda = new BufferedImage(cm, bandRaster, false, null);

                    //Creamos la ventana interna nueva con la imagen de fondo de la banda
                    VentanaInternaImagen vi = new VentanaInternaImagen(this, img.getWidth(), img.getHeight());

                    vi.getLienzo().setImagen(imgBanda);
                    this.escritorioTrabajo.add(vi);
                    vi.setTitle(vi_original.getTitle() + '[' + iBanda + ']');
                    vi.setVisible(true);
                }
            }
        }
    }
    
    /**
     * Toma la imagen del Canvas de la VentanaInternaImagen seleccionada y la 
     * cambia al espacio de color que le indica en el parámetro, considerando el
     * espacio actual para ello. Los espacios disponibles son "RGB", "YCC" y "GREY".
     * @param espacioColor String que indica el espacio de color al cual cambiar
     */
    protected void cambiarEspacioColor(String espacioColor){
        VentanaInternaImagen vi_original = (VentanaInternaImagen) (escritorioTrabajo.getSelectedFrame());
    
        if (vi_original != null) {
            BufferedImage img = vi_original.getLienzo().getImagen();
            
            if(img != null){
                BufferedImage imgOut = null;
                ColorConvertOp cop;
                ColorSpace cs;
                
                if(img.getColorModel().getColorSpace().isCS_sRGB() && !espacioColor.equals("RGB")){
                    if(espacioColor.equals("YCC"))
                        cs = ColorSpace.getInstance(ColorSpace.CS_PYCC);
                    else
                        cs = ColorSpace.getInstance(ColorSpace.CS_GRAY);
                    
                    cop = new ColorConvertOp(cs, null);
                    
                    imgOut = cop.filter(img, null);
                }
                
                else if(img.getColorModel().getColorSpace().getType() == ColorSpace.TYPE_YCbCr && !espacioColor.equals("YCC")){
                    if(espacioColor.equals("RGB"))
                        cs = ColorSpace.getInstance(ColorSpace.CS_sRGB);
                    else
                        cs = ColorSpace.getInstance(ColorSpace.CS_GRAY);
                    
                    cop = new ColorConvertOp(cs, null);
                    
                    imgOut = cop.filter(img, null);
                }
                else if(img.getColorModel().getColorSpace().getType() == ColorSpace.CS_GRAY && !espacioColor.equals("GREY")){
                    if(espacioColor.equals("RGB"))
                        cs = ColorSpace.getInstance(ColorSpace.CS_sRGB);
                    else
                        cs = ColorSpace.getInstance(ColorSpace.CS_PYCC);
                    
                    cop = new ColorConvertOp(cs, null);
                    
                    imgOut = cop.filter(img, null);
                }
                
                if(imgOut != null){
                    //Creamos la ventana interna nueva con la imagen en el nuevo espacio de color
                    VentanaInternaImagen vi = new VentanaInternaImagen(this, img.getWidth(), img.getHeight());

                    vi.getLienzo().setImagen(imgOut);
                    this.escritorioTrabajo.add(vi);

                    vi.setTitle(vi_original.getTitle() + '[' + espacioColor + ']');
                    vi.setVisible(true);
                }
            }
        }
    }
    
    /**
     * Método que dada una img y un nº de grados (en precisión doble), se rota tantos 
     * grados como se le indique aplicandole una AffineTransformOp y se devuelve una nueva
     * imagen con la operación aplicada.
     * @param img la imagen a rotar
     * @param grados El número de grados a rotar
     * @return Una nueva imagen con la operación de rotación aplicada
     */
    
    protected BufferedImage aplicarRotacion(BufferedImage img, double grados){
        double r = Math.toRadians(grados);
        Point p = new Point(img.getWidth()/2, img.getHeight()/2);
        AffineTransform at = AffineTransform.getRotateInstance(r,p.x,p.y);
        AffineTransformOp atop;

        atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
        BufferedImage imgDest = atop.filter(img, null);

        return imgDest;
    }
    
    /**
     * Método que dada una img y un porcentaje (en precisión doble), se escala en medida
     * del porcentaje pasado aplicandole una AffineTransformOp y se devuelve una nueva
     * imagen con la operación aplicada.
     * @param img la imagen a reescalar
     * @param esc el factor de escalado (2.0 es el doble de grande, 0.5 es la mitad) 
     * @return la imagen con el reescalado aplicado
     */
    
    protected BufferedImage aplicarEscalado(BufferedImage img, double esc){
        AffineTransform at = AffineTransform.getScaleInstance(esc, esc);
        AffineTransformOp atop;

        atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);

        return atop.filter(img, null);
    }
    
    /**
     * Inicializa el miembro player de la clase SMClipPlayer con el fichero seleccionado
     * por la ComboBox de archivos de audio. Si ya estaba creado y estaba reproduciendo,
     * pausa el audio; de lo contrario, lo reanuda (llamando a player.play, player.pause y
     * player.resume respectivamente).
     */
    
    protected void reproducirAudio(){
        if(player == null){
            File f = (File)listaReproduccionCB.getSelectedItem();

            if(f != null){
                player = new SMClipPlayer(f);

                ((SMClipPlayer)player).addLineListener(new AudioListener());

                if (player != null) {
                    player.play();

                    barraTiempoSonido.setMaximum((int) (player.getClip().getMicrosecondLength()));

                    ActuSonido  = new ActuSonidoHebra();
                    
                    ActuSonido.setClip(player.getClip());
                    ActuSonido.setProgressBar(barraTiempoSonido);
                    
                    ActuSonido.start();
                }
            }
        }
        else if(player.getClip().isRunning())
            player.pause();
        else
            player.resume();
    }
    
    /**
     * Detiene la reproducción del player y lo asigna a null. Llamar a este método
     * si se dispone de un boton de stop y se quiere reiniciar el audio.
     * No confundir con un método de pause. Ver reproducirAudio para ello.
     */
    
    protected void pararAudio(){
        if(player != null){
            player.stop();
            
            player = null;
        }
    }
    
    /**
     * Lanza un diálogo con 3 tipos de filtro (Imágen, Audio y Video) y dependiendo del archivo seleccionado
     * se crea un tipo de ventana correspondiente al medio (VentanaInternaImagen/VentanaInternaVLCPlayer) o
     * si es un archivo de audio se carga en el comboBox y queda listo para su manipulación/interacción.
     * @throws IOException 
     */
    
    protected void abrirArchivo() throws IOException{
        JFileChooser dlg = new JFileChooser();
        String descripcionImg = "Imagenes " + Arrays.toString(ImageIO.getReaderFormatNames());
        FileNameExtensionFilter filtroImgArch = new FileNameExtensionFilter(descripcionImg, ImageIO.getReaderFormatNames());
        
        String descripcionAudio = "Audio " + Arrays.toString(AudioSystem.getAudioFileTypes());
        FileNameExtensionFilter filtroAudioArch = new FileNameExtensionFilter(descripcionAudio, Arrays.toString(AudioSystem.getAudioFileTypes()), "wav");
        
        String descripcionVideo = "Video " + "[mp4, 3gp, mkv, avi...]";
        FileNameExtensionFilter filtroVideoArch = new FileNameExtensionFilter(descripcionVideo, VideoFileFilter.INSTANCE.getExtensions());
        
        dlg.setFileFilter(filtroImgArch);
        dlg.addChoosableFileFilter(filtroAudioArch);
        dlg.addChoosableFileFilter(filtroVideoArch);
        
        dlg.setAcceptAllFileFilterUsed(false);
        
        int resp = dlg.showOpenDialog(this);
        
        if( resp == JFileChooser.APPROVE_OPTION) {
            File f = dlg.getSelectedFile();
            
            /* Si es una imagen */
            if(filtroImgArch.accept(f)){
                BufferedImage img = ImageIO.read(f);

                VentanaInternaImagen vi = new VentanaInternaImagen(this, img.getWidth(), img.getHeight());

                vi.getLienzo().setImagen(img);
                this.escritorioTrabajo.add(vi);
                vi.setTitle(f.getName() + " [RGB]");
                vi.setVisible(true);
            }
            
            /* Si es un Audio */
            else if(filtroAudioArch.accept(f)){
                File fcb = new File(f.getPath()){
                    @Override
                    public String toString(){
                        return this.getName();
                    }
                };

                listaReproduccionCB.addItem(fcb);
                listaReproduccionCB.setSelectedItem(fcb);
                listaReproduccionCB.setPreferredSize(new Dimension(fcb.getName().length() * 12,listaReproduccionCB.getHeight()));
            }
            
            /* Si es un video */
            else if(filtroVideoArch.accept(f)){             
                  VentanaInternaVLCPlayer vilc = VentanaInternaVLCPlayer.getInstance(this, f);
            
                escritorioTrabajo.add(vilc);
                vilc.setVisible(true);
                vilc.setTitle(f.getName());  
            }
        }
    }
    
    /**
     * Si la VentanaInterna activa es del tipo VentanaInternaImage, lanza un diálogo de guardado de archivo y guarda en el 
     * archivo seleccionado la imagen correspondiente al Canvas de la VentanaInternaImagen con todas las modificaciones y figura
     * creadas en la imagen.
     * @throws IOException 
     */
    protected void guardarArchivo() throws IOException{
        VentanaInterna vi = (VentanaInterna) escritorioTrabajo.getSelectedFrame();
        
        if(vi != null && vi instanceof VentanaInternaImagen){
            JFileChooser dlg = new JFileChooser();
            FileNameExtensionFilter filtroArch = new FileNameExtensionFilter("Imagenes(*.jpg, *.gif, *.png, *.bmp, *.jpeg, *.wbmp)",
                                                                             "jpg", "gif", "png", "jpeg", "bmp", "wbmp");
        
            dlg.setFileFilter(filtroArch);

            int resp = dlg.showSaveDialog(this);
        
            if(resp == JFileChooser.APPROVE_OPTION) {
                try{
                    BufferedImage img = ((VentanaInternaImagen) vi).getLienzo().getImagen(true);
                    
                    File f = dlg.getSelectedFile();
                    
                    int ind = f.getName().lastIndexOf(".");
                    
                    String ext = "";
                    
                    if (ind > 0) {
                        ext = f.getName().substring(ind+1);
                    }

                    if (img != null) {
                        boolean esc_correcta = ImageIO.write(img, ext, f);
                        
                        if(esc_correcta)
                            vi.setTitle(f.getName());
                        else
                            throw new UnsupportedDataTypeException();
                    }
                } catch (javax.activation.UnsupportedDataTypeException ex) {
                    showMessageDialog(this, "El formato indicado es sopertado.", null, 0);
                }
            }
        }
    }
    
    /**
     * Toma un archivo como paramatero que contiene un audio y lanza un dialago de guardado de archivo
     * que seleccionará el archivo donde se guardará finalmente el audio. Posteriormente, se añade a 
     * la lista de reproducción del ComboBox y se queda como seleccionado para reproducirse. Se hace 
     * de esta manera para que se pueda lanzar el dialogo DESPUÉS de que se termine la grabación del audio.
     * @param f el archivo donde está guardado el audio temporalmente
     */
    
    protected void guardarAudioGrabado(File f){
        if(f != null){
            JFileChooser dlg = new JFileChooser();
            FileNameExtensionFilter filtroArch = new FileNameExtensionFilter("Sonido(*.wav)", "wav");
        
            dlg.setFileFilter(filtroArch);

            int resp = dlg.showSaveDialog(this);
        
            if(resp == JFileChooser.APPROVE_OPTION) {
                try{                    
                    File fDial = dlg.getSelectedFile();
                    
                    String ruta = fDial.getAbsolutePath();
                    
                    File archivoDefinitivo = new File(ruta + ".wav"){
                        @Override
                        public String toString(){
                            return this.getName();
                        }
                    };
                    
                    
                    /* Comprobación si la extensión es correcta
                    int ind = fDial.getName().lastIndexOf(".");
                    
                    String ext = "";
                    
                    if (ind > 0) {
                        ext = fDial.getName().substring(ind+1);
                    }

                    
                    boolean ext_correcta = ext.equals("wav");
                        
                   
                    if(!ext_correcta)
                        throw new UnsupportedDataTypeException();
                        
                    */
                    
                    boolean renomb_correcto = f.renameTo(archivoDefinitivo);
                    
                    if(!renomb_correcto)
                        throw new IOException();
                    else{
                        listaReproduccionCB.addItem(archivoDefinitivo);
                        listaReproduccionCB.setSelectedItem(archivoDefinitivo);
                        listaReproduccionCB.setPreferredSize(new Dimension(archivoDefinitivo.getName().length() * 12,listaReproduccionCB.getHeight()));
                    }
                } catch (IOException ex) {
                    showMessageDialog(this, "Error en la escritura del archivo de grabación.", null, 0);
                }
            }
            
            else {
                f.delete();
            }
        }
    } 
    
    /**
     * Simple método para añadir un color al vector de colores (y a su vez a los ComboBoxes de 
     * relleno y tazo) disponibles para dibujar.    
     * @param c Color a añadir a la lista 
     */
    public void agregarColorCustom(Color c){
        listaColores.add(c);

        colorCBRelleno.setSelectedIndex(colorCBRelleno.getItemCount()-1);
        colorCBTrazo.setSelectedIndex(colorCBTrazo.getItemCount()-1);   
    }
    
    /**
     * Activa el modo de degradado en la VentanaInternaImagen que está seleccionada.
     * @param frente Color de frente del gradiente
     * @param fondo Color de fondo del gradiente
     * @param esVertical True si el gradiente es en el eje vertical, falso si es en el horizontal
     */
    
    public void activarDegradado(Color frente, Color fondo, boolean esVertical){
       VentanaInterna vi;
       vi = (VentanaInterna)escritorioTrabajo.getSelectedFrame();
        
       if(vi != null && vi instanceof VentanaInternaImagen){
            ((VentanaInternaImagen) vi).getLienzo().setGradient(true, frente, fondo, esVertical);
            ((VentanaInternaImagen) vi).getLienzo().setFill(false);
       
            this.rellenoHerramienta.setSelected(false);
       }
    }
    
    /**
     * Desactiva el efecto de degradado en la VentanaInternaImagen activa
     */
    
    public void desactivarDegradado(){
       VentanaInterna vi;
       vi = (VentanaInterna)escritorioTrabajo.getSelectedFrame();
        
       if(vi != null && vi instanceof VentanaInternaImagen){
            ((VentanaInternaImagen) vi).getLienzo().setGradient(false, null, null, false);
       }
    }
    
    /**
     * Dada una imagen (un "frame") crea una VentanaInternaImagen con esa captura de fondo y
     * con el título "Captura"
     * @param frme la imagen de fondo de la ventana
     */
    
    public void crearVentanaCaptura(BufferedImage frme){
        /* Creamos la ventana interna con el "frame" tomado */
        if(frme != null){
            VentanaInternaImagen viaux = new VentanaInternaImagen(this, frme.getWidth(), frme.getHeight());

            viaux.getLienzo().setImagen(frme);
            this.escritorioTrabajo.add(viaux);
            viaux.setTitle("Captura " + '[' + "RGB" + ']');
            viaux.setVisible(true);
        }      
    }
    
    /**
     * Método para indicar el texto que aparecera en la esquina inferior derecha
     * de la aplicación.
     * @param str el String que especifica que aparecerá en el JLabel
     */
    
    public void setPosicionText(String str){
        mousePosicionText.setText(str);
    }
    
    /**
     * Aplica uno de los diferentes filtros mediante una convolución (ConvolveOp) a la imagen
     * del Canvas de la VentanaInternaImagen activa. El párametro especifica cuál de los filtros
     * del ComboBox se aplicará. 
     * @param filtro 0 : Media | 1 : Binomial | 2 : Enfoque | 3 : Relieve | 4 : Laplaciano
     */

    protected void aplicarConvolucion(int filtro) {
       VentanaInterna vi;
       vi = (VentanaInterna)escritorioTrabajo.getSelectedFrame();
        
       if(vi != null && vi instanceof VentanaInternaImagen) {
            BufferedImage imgSource = ((VentanaInternaImagen) vi).getLienzo().getImagen();
            try{
               Kernel mascara = null;
               
               switch(filtro){
                    case 0:
                        mascara = KernelProducer.createKernel(KernelProducer.TYPE_MEDIA_3x3);
                        break;
                    case 1:
                        mascara = KernelProducer.createKernel(KernelProducer.TYPE_BINOMIAL_3x3);
                        break;
                    case 2:
                        mascara = KernelProducer.createKernel(KernelProducer.TYPE_ENFOQUE_3x3);
                        break;
                    case 3:
                        mascara = KernelProducer.createKernel(KernelProducer.TYPE_RELIEVE_3x3);
                        break;
                    case 4:
                        mascara = KernelProducer.createKernel(KernelProducer.TYPE_LAPLACIANA_3x3);
                        break;
               }
               
               ConvolveOp cop = new ConvolveOp(mascara);

                BufferedImage imgdest = cop.filter(imgSource, null);

                ((VentanaInternaImagen) vi).getLienzo().setImagen(imgdest);
                ((VentanaInternaImagen) vi).getLienzo().repaint();
            }catch(IllegalArgumentException e){
                System.err.println(e.getLocalizedMessage());
            }
        }
    }

    
    private void nuevoArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoArchivoActionPerformed
        this.nuevaVentana();
    }//GEN-LAST:event_nuevoArchivoActionPerformed

    private void lineaHerramientaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lineaHerramientaActionPerformed
       VentanaInterna vi;
       vi = (VentanaInterna)escritorioTrabajo.getSelectedFrame();
        
       if(vi != null && vi instanceof VentanaInternaImagen)
            ((VentanaInternaImagen) vi).getLienzo().setTool("linea");
        
        herramientaText.setText("Línea");
    }//GEN-LAST:event_lineaHerramientaActionPerformed

    private void puntoHerramientaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_puntoHerramientaActionPerformed
       VentanaInterna vi;
       vi = (VentanaInterna)escritorioTrabajo.getSelectedFrame();
        
       if(vi != null && vi instanceof VentanaInternaImagen)
            ((VentanaInternaImagen) vi).getLienzo().setTool("punto");
        
        herramientaText.setText("Punto");
    }//GEN-LAST:event_puntoHerramientaActionPerformed

    private void rectanguloHerramientaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rectanguloHerramientaActionPerformed
       VentanaInterna vi;
       vi = (VentanaInterna)escritorioTrabajo.getSelectedFrame();
        
       if(vi != null && vi instanceof VentanaInternaImagen)
            ((VentanaInternaImagen) vi).getLienzo().setTool("rectangulo");
        
        herramientaText.setText("Rectangulo");
    }//GEN-LAST:event_rectanguloHerramientaActionPerformed

    private void elipseHerramientaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_elipseHerramientaActionPerformed
    VentanaInterna vi;
       vi = (VentanaInterna)escritorioTrabajo.getSelectedFrame();
        
       if(vi != null && vi instanceof VentanaInternaImagen)
            ((VentanaInternaImagen) vi).getLienzo().setTool("elipse");
        
        herramientaText.setText("Elipse");
    }//GEN-LAST:event_elipseHerramientaActionPerformed

    private void rellenoHerramientaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rellenoHerramientaActionPerformed
       VentanaInterna vi;
       vi = (VentanaInterna)escritorioTrabajo.getSelectedFrame();
        
       if(vi != null && vi instanceof VentanaInternaImagen)
            ((VentanaInternaImagen) vi).getLienzo().setFill(rellenoHerramienta.isSelected());
    }//GEN-LAST:event_rellenoHerramientaActionPerformed

    private void grosorSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_grosorSpinnerStateChanged
       VentanaInterna vi;
       vi = (VentanaInterna)escritorioTrabajo.getSelectedFrame();
        
       if(vi != null && vi instanceof VentanaInternaImagen)
            ((VentanaInternaImagen) vi).getLienzo().setThickness((int)grosorSpinner.getValue());
    }//GEN-LAST:event_grosorSpinnerStateChanged

    private void alisadoHerramientaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alisadoHerramientaActionPerformed
       VentanaInterna vi;
       vi = (VentanaInterna)escritorioTrabajo.getSelectedFrame();
        
       if(vi != null && vi instanceof VentanaInternaImagen)
            ((VentanaInternaImagen) vi).getLienzo().setAliasing(alisadoHerramienta.isSelected());
    }//GEN-LAST:event_alisadoHerramientaActionPerformed

    private void guardarArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarArchivoActionPerformed
        try {
            this.guardarArchivo();
        } catch (IOException ex) {
            Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_guardarArchivoActionPerformed

    private void verBarraEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verBarraEstadoActionPerformed
       infoPanel.setVisible(verBarraEstado.getState());
    }//GEN-LAST:event_verBarraEstadoActionPerformed

    private void verBarraAtributosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verBarraAtributosActionPerformed
        grosorSpinner.setVisible(verBarraAtributos.getState());
        alisadoHerramienta.setVisible(verBarraAtributos.getState());
        rellenoHerramienta.setVisible(verBarraAtributos.getState());
        transparenciaHerramienta.setVisible(verBarraAtributos.getState());
        rellenoLabel.setVisible(verBarraAtributos.getState());
        trazoLabel.setVisible(verBarraAtributos.getState());
        degradadoHerramienta.setVisible(verBarraAtributos.getState());
        discontHerramienta.setVisible(verBarraAtributos.getState());
        transparenciaHerramienta.setVisible(verBarraAtributos.getState());
        alphaLabel.setVisible(verBarraAtributos.getState());
        colorCBTrazo.setVisible(verBarraAtributos.getState());
        colorCBRelleno.setVisible(verBarraAtributos.getState());
    }//GEN-LAST:event_verBarraAtributosActionPerformed

    private void verBarraFormasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verBarraFormasActionPerformed
        puntoHerramienta.setVisible(verBarraFormas.getState());
        lineaHerramienta.setVisible(verBarraFormas.getState());
        rectanguloHerramienta.setVisible(verBarraFormas.getState());
        elipseHerramienta.setVisible(verBarraFormas.getState());
        editarHerramienta.setVisible(verBarraFormas.getState());
        trazoHerramienta.setVisible(verBarraFormas.getState());
        areaBoton.setVisible(verBarraFormas.getState());
        quadHerramienta.setVisible(verBarraFormas.getState());
    }//GEN-LAST:event_verBarraFormasActionPerformed

    private void editarHerramientaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarHerramientaActionPerformed
       VentanaInterna vi;
       vi = (VentanaInterna)escritorioTrabajo.getSelectedFrame();
        
       if(vi != null && vi instanceof VentanaInternaImagen)
            ((VentanaInternaImagen) vi).getLienzo().setEdit(editarHerramienta.isSelected());
        
        herramientaText.setText("Editar");
    }//GEN-LAST:event_editarHerramientaActionPerformed

    private void abrirArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirArchivoActionPerformed
        try {
            this.abrirArchivo();
        } catch (IOException ex) {
            Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_abrirArchivoActionPerformed

    private void abrirArchivoBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirArchivoBotonActionPerformed
        try {
            this.abrirArchivo();
        } catch (IOException ex) {
            Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_abrirArchivoBotonActionPerformed

    private void guardarArchivoBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarArchivoBotonActionPerformed
        try {
            this.guardarArchivo();
        } catch (IOException ex) {
            Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_guardarArchivoBotonActionPerformed

    private void nuevoArchivoBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoArchivoBotonActionPerformed
        this.nuevaVentana();
    }//GEN-LAST:event_nuevoArchivoBotonActionPerformed

    private void cambiarTamMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cambiarTamMenuActionPerformed
        ventDim.setVisible(true);
    }//GEN-LAST:event_cambiarTamMenuActionPerformed

    private void menuBrilloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuBrilloActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorioTrabajo.getSelectedFrame());

        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImagen();
           
            if(imgSource!=null){
                try{
                    RescaleOp rop = new RescaleOp(1.0F, 100.0F, null);
                    rop.filter(imgSource, imgSource);
                    vi.getLienzo().repaint();
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_menuBrilloActionPerformed

    private void menuConvolucionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuConvolucionActionPerformed
        this.aplicarConvolucion(0);
    }//GEN-LAST:event_menuConvolucionActionPerformed

    private void brilloSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_brilloSliderStateChanged
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorioTrabajo.getSelectedFrame());

        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImagen();
           
            if(imgSource!=null && imgFuente != null){
                try{
                    RescaleOp rop;
                    
                    if(imgFuente.getColorModel().hasAlpha()){
                        float[] factorEscalada = {1.0F,1.0F,1.0F,1.0F};
                        float[] offSet = {brilloSlider.getValue(), brilloSlider.getValue(), brilloSlider.getValue(), 0.0F};
                    
                        rop = new RescaleOp(factorEscalada, offSet, null);
                    }
                    else
                        rop = new RescaleOp(1.0F, brilloSlider.getValue(), null);
                    
                    rop.filter(imgFuente, imgSource);
                    
                    escritorioTrabajo.repaint();
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }

    }//GEN-LAST:event_brilloSliderStateChanged

    private void brilloSliderFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_brilloSliderFocusGained
        VentanaInternaImagen vi = (VentanaInternaImagen)(escritorioTrabajo.getSelectedFrame());
        if(vi!=null){
            ColorModel cm = vi.getLienzo().getImagen().getColorModel();
            WritableRaster raster = vi.getLienzo().getImagen().copyData(null);
            boolean alfaPre = vi.getLienzo().getImagen().isAlphaPremultiplied();
        
            imgFuente = new BufferedImage(cm,raster,alfaPre,null);
        }
    }//GEN-LAST:event_brilloSliderFocusGained

    private void brilloSliderFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_brilloSliderFocusLost
        imgFuente = null;
        brilloSlider.setValue(0);
    }//GEN-LAST:event_brilloSliderFocusLost

    private void menuLookUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuLookUpActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorioTrabajo.getSelectedFrame());
    
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImagen();
            try{
                LookupTable lt;
                lt=LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_SFUNCION);

                LookupOp lkop = new LookupOp(lt, null);

                lkop.filter(imgSource, imgSource);

                vi.getLienzo().setImagen(imgSource);
                vi.getLienzo().repaint();
            }catch(IllegalArgumentException e){
                System.err.println(e.getLocalizedMessage());
            }
        }
    }//GEN-LAST:event_menuLookUpActionPerformed

    private void contrasteNormalBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contrasteNormalBotonActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorioTrabajo.getSelectedFrame());
    
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImagen();
            try{
                LookupTable lt;
                lt=LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_SFUNCION);

                LookupOp lkop = new LookupOp(lt, null);
                
                lkop.filter(imgSource, imgSource);

                vi.getLienzo().setImagen(imgSource);
                vi.getLienzo().repaint();
            }catch(IllegalArgumentException e){
                System.err.println(e.getLocalizedMessage());
            }
        }
    }//GEN-LAST:event_contrasteNormalBotonActionPerformed

    private void iluminarBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iluminarBotonActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorioTrabajo.getSelectedFrame());
    
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImagen();
            try{
                LookupTable lt;
                lt=LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_LOGARITHM);

                LookupOp lkop = new LookupOp(lt, null);
                
                lkop.filter(imgSource, imgSource);

                vi.getLienzo().setImagen(imgSource);
                vi.getLienzo().repaint();
            }catch(IllegalArgumentException e){
                System.err.println(e.getLocalizedMessage());
            }
        }
    }//GEN-LAST:event_iluminarBotonActionPerformed

    private void oscurecimientoBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oscurecimientoBotonActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorioTrabajo.getSelectedFrame());
    
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImagen();
            try{
                LookupTable lt;
                lt=LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_POWER);

                LookupOp lkop = new LookupOp(lt, null);
                
                lkop.filter(imgSource, imgSource);

                vi.getLienzo().setImagen(imgSource);
                vi.getLienzo().repaint();
            }catch(IllegalArgumentException e){
                System.err.println(e.getLocalizedMessage());
            }
        }
    }//GEN-LAST:event_oscurecimientoBotonActionPerformed

    private void menuSenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSenoActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorioTrabajo.getSelectedFrame());
    
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImagen();
            try{
                double w = 180.0 / 255.0;
                LookupTable lt;
                
                lt= LookupTableCreator.seno(w);
                
                LookupOp lkop = new LookupOp(lt, null);
                
                lkop.filter(imgSource, imgSource);

                vi.getLienzo().setImagen(imgSource);
                vi.getLienzo().repaint();
            }catch(IllegalArgumentException e){
                System.err.println(e.getLocalizedMessage());
            }
        }
    }//GEN-LAST:event_menuSenoActionPerformed

    private void rotacionSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rotacionSliderStateChanged
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorioTrabajo.getSelectedFrame());
    
        if (vi != null && imgFuente != null) {
            try{
                double r = Math.toRadians(rotacionSlider.getValue());
                Point p = new Point(imgFuente.getWidth()/2, imgFuente.getHeight()/2);
                AffineTransform at = AffineTransform.getRotateInstance(r,p.x,p.y);
                AffineTransformOp atop;
                
                atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
                BufferedImage imgDest = atop.filter(imgFuente, null);

                vi.getLienzo().setImagen(imgDest);
                vi.getLienzo().repaint();
            }catch(IllegalArgumentException e){
                System.err.println(e.getLocalizedMessage());
            }
        }
    }//GEN-LAST:event_rotacionSliderStateChanged

    private void senoBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_senoBotonActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorioTrabajo.getSelectedFrame());
    
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImagen();
            try{
                double w = 180.0 / 255.0;
                LookupTable lt;
                
                lt= LookupTableCreator.seno(w);
                
                LookupOp lkop = new LookupOp(lt, null);
                
                lkop.filter(imgSource, imgSource);

                vi.getLienzo().setImagen(imgSource);
                vi.getLienzo().repaint();
            }catch(IllegalArgumentException e){
                System.err.println(e.getLocalizedMessage());
            }
        }
    }//GEN-LAST:event_senoBotonActionPerformed

    private void rotacionSliderFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_rotacionSliderFocusGained
        VentanaInternaImagen vi = (VentanaInternaImagen)(escritorioTrabajo.getSelectedFrame());
        
        if(vi!=null){
            ColorModel cm = vi.getLienzo().getImagen().getColorModel();
            WritableRaster raster = vi.getLienzo().getImagen().copyData(null);
            boolean alfaPre = vi.getLienzo().getImagen().isAlphaPremultiplied();
        
            imgFuente = new BufferedImage(cm,raster,alfaPre,null);
        }
    }//GEN-LAST:event_rotacionSliderFocusGained

    private void rotacionSliderFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_rotacionSliderFocusLost
        imgFuente = null;
        rotacionSlider.setValue(0);
    }//GEN-LAST:event_rotacionSliderFocusLost

    private void colorCBTrazoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorCBTrazoActionPerformed
        VentanaInterna vi;
       vi = (VentanaInterna)escritorioTrabajo.getSelectedFrame();
        
       if(vi != null && vi instanceof VentanaInternaImagen){
            ((VentanaInternaImagen) vi).getLienzo().setStrokeColor((Color) colorCBTrazo.getSelectedItem());
        }
        
    }//GEN-LAST:event_colorCBTrazoActionPerformed

    private void rotacion90BotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotacion90BotonActionPerformed
        VentanaInternaImagen vi;
        
        vi = (VentanaInternaImagen)escritorioTrabajo.getSelectedFrame();

        if(vi != null){
            BufferedImage imgSource =  vi.getLienzo().getImagen();
          
            if(imgSource != null){
                BufferedImage imgDest = aplicarRotacion(imgSource, 90);
                
                vi.getLienzo().setImagen(imgDest);
                vi.getLienzo().repaint();
            }
        }
    }//GEN-LAST:event_rotacion90BotonActionPerformed

    private void rotacion180BotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotacion180BotonActionPerformed
        VentanaInternaImagen vi;
        
        vi = (VentanaInternaImagen)escritorioTrabajo.getSelectedFrame();

        if(vi != null){
            BufferedImage imgSource =  vi.getLienzo().getImagen();
          
            if(imgSource != null){
                BufferedImage imgDest = aplicarRotacion(imgSource, 180);
                
                vi.getLienzo().setImagen(imgDest);
                vi.getLienzo().repaint();
            }
        }
    }//GEN-LAST:event_rotacion180BotonActionPerformed

    private void rotacion270BotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotacion270BotonActionPerformed
        VentanaInternaImagen vi;
        
        vi = (VentanaInternaImagen)escritorioTrabajo.getSelectedFrame();

        if(vi != null){
            BufferedImage imgSource =  vi.getLienzo().getImagen();
          
            if(imgSource != null){
                BufferedImage imgDest = aplicarRotacion(imgSource, 270);
                
                vi.getLienzo().setImagen(imgDest);
                vi.getLienzo().repaint();
            }
        }
    }//GEN-LAST:event_rotacion270BotonActionPerformed

    private void aumentarBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aumentarBotonActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorioTrabajo.getSelectedFrame());
    
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImagen();
            try{
                BufferedImage imgDest = aplicarEscalado(imgSource, 1.25);

                vi.getLienzo().setImagen(imgDest);
                vi.getLienzo().repaint();
            }catch(IllegalArgumentException e){
                System.err.println(e.getLocalizedMessage());
            }
        }
    }//GEN-LAST:event_aumentarBotonActionPerformed

    private void disminuirBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disminuirBotonActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorioTrabajo.getSelectedFrame());
    
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImagen();
            try{
                BufferedImage imgDest = aplicarEscalado(imgSource, 0.75);

                vi.getLienzo().setImagen(imgDest);
                vi.getLienzo().repaint();
            }catch(IllegalArgumentException e){
                System.err.println(e.getLocalizedMessage());
            }
        }
    }//GEN-LAST:event_disminuirBotonActionPerformed

    private void combinarBandasMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combinarBandasMenuActionPerformed
        this.descomponerEnBandas();
    }//GEN-LAST:event_combinarBandasMenuActionPerformed

    private void descomponerBandasBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_descomponerBandasBotonActionPerformed
        this.descomponerEnBandas();
    }//GEN-LAST:event_descomponerBandasBotonActionPerformed

    private void espacioColorCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_espacioColorCBActionPerformed
        this.cambiarEspacioColor((String) espacioColorCB.getSelectedItem());
    }//GEN-LAST:event_espacioColorCBActionPerformed

    private void convertirColorMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convertirColorMenuActionPerformed
        this.cambiarEspacioColor("YCC");
    }//GEN-LAST:event_convertirColorMenuActionPerformed

    private void reproducirBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reproducirBotonActionPerformed
        this.reproducirAudio();
    }//GEN-LAST:event_reproducirBotonActionPerformed

    private void pausarBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pausarBotonActionPerformed
        this.pararAudio();
    }//GEN-LAST:event_pausarBotonActionPerformed

    private void grabarBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grabarBotonActionPerformed
        if(recorder == null){
            ficheroGrabacion = new File("temp");
            
            recorder = new SMSoundRecorder(ficheroGrabacion);
            recorder.record();
            
            grabarBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/stopRecord24x24.png")));
        }
        else{
            recorder.stop();
            
            this.guardarAudioGrabado(ficheroGrabacion);
            
            grabarBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/record24x24.png")));
            recorder = null;
        }

    }//GEN-LAST:event_grabarBotonActionPerformed

    private void transparenciaHerramientaStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_transparenciaHerramientaStateChanged
       VentanaInterna vi;
       vi = (VentanaInterna)escritorioTrabajo.getSelectedFrame();
        
        if(vi != null && vi instanceof VentanaInternaImagen)
            ((VentanaInternaImagen) vi).getLienzo().setTransparency(transparenciaHerramienta.getValue());
    }//GEN-LAST:event_transparenciaHerramientaStateChanged

    private void quadHerramientaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quadHerramientaActionPerformed
       VentanaInterna vi;
       vi = (VentanaInterna)escritorioTrabajo.getSelectedFrame();
        
       if(vi != null && vi instanceof VentanaInternaImagen)
            ((VentanaInternaImagen) vi).getLienzo().setTool("cuadratica");
        
        herramientaText.setText("Curva Cuadrática");
    }//GEN-LAST:event_quadHerramientaActionPerformed

    private void trazoHerramientaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trazoHerramientaActionPerformed
       VentanaInterna vi;
       vi = (VentanaInterna)escritorioTrabajo.getSelectedFrame();
        
       if(vi != null && vi instanceof VentanaInternaImagen)
            ((VentanaInternaImagen) vi).getLienzo().setTool("trazo");

        herramientaText.setText("Trazo Libre");
    }//GEN-LAST:event_trazoHerramientaActionPerformed

    private void areaBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_areaBotonActionPerformed
       VentanaInterna vi;
       vi = (VentanaInterna)escritorioTrabajo.getSelectedFrame();
        
       if(vi != null && vi instanceof VentanaInternaImagen)
            ((VentanaInternaImagen) vi).getLienzo().setTool("area");
        
        herramientaText.setText("Forma Personalizada");
    }//GEN-LAST:event_areaBotonActionPerformed

    private void colorCBRellenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorCBRellenoActionPerformed
       VentanaInterna vi;
       vi = (VentanaInterna)escritorioTrabajo.getSelectedFrame();
        
       if(vi != null && vi instanceof VentanaInternaImagen)
            ((VentanaInternaImagen) vi).getLienzo().setFillerColor((Color) colorCBRelleno.getSelectedItem());
    }//GEN-LAST:event_colorCBRellenoActionPerformed

    private void selectorColorMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectorColorMenuActionPerformed
        SelectorColor selectCol = new SelectorColor(this, true);
        
        selectCol.setVisible(true);
    }//GEN-LAST:event_selectorColorMenuActionPerformed

    private void discontHerramientaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_discontHerramientaActionPerformed
       VentanaInterna vi;
       vi = (VentanaInterna)escritorioTrabajo.getSelectedFrame();
        
       if(vi != null && vi instanceof VentanaInternaImagen)
            ((VentanaInternaImagen) vi).getLienzo().setDiscontStroke(discontHerramienta.isSelected());
        
    }//GEN-LAST:event_discontHerramientaActionPerformed

    private void aboutMeMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMeMenuActionPerformed
        SobreDialog sd = new SobreDialog(this, true);
        
        sd.setVisible(true);
    }//GEN-LAST:event_aboutMeMenuActionPerformed

    private void degradadoHerramientaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_degradadoHerramientaActionPerformed
        DegradadoDialog degradDialog = new DegradadoDialog(this, true);

        degradDialog.setVisible(true);
    }//GEN-LAST:event_degradadoHerramientaActionPerformed

    private void sepiaBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sepiaBotonActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorioTrabajo.getSelectedFrame());
    
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImagen();
            try{
                SepiaOp sop = new SepiaOp();
                
                sop.filter(imgSource, imgSource);

                vi.getLienzo().setImagen(imgSource);
                vi.getLienzo().repaint();
            }catch(IllegalArgumentException e){
                System.err.println(e.getLocalizedMessage());
            }
        }
    }//GEN-LAST:event_sepiaBotonActionPerformed

    private void duplicarBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_duplicarBotonActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen)(escritorioTrabajo.getSelectedFrame());
        
        if(vi!=null && vi.getLienzo().getImagen() != null){
            ColorModel cm = vi.getLienzo().getImagen().getColorModel();
            WritableRaster raster = vi.getLienzo().getImagen().copyData(null);
            boolean alfaPre = vi.getLienzo().getImagen().isAlphaPremultiplied();
        
            BufferedImage imgDupl = new BufferedImage(cm,raster,alfaPre,null);
            
            VentanaInternaImagen nuevaVen = new VentanaInternaImagen(this, ventDim.getAncho(), ventDim.getAlto());
       
            escritorioTrabajo.add(nuevaVen);
            nuevaVen.setVisible(true);
            
            nuevaVen.getLienzo().setImagen(imgDupl);
            
            nuevaVen.setTitle(vi.getTitle() + " (Copia)");   
        }
    }//GEN-LAST:event_duplicarBotonActionPerformed

    private void negativoBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_negativoBotonActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorioTrabajo.getSelectedFrame());
    
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImagen();
            try{
                LookupTable lt = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_NEGATIVE);
                
                LookupOp lkop = new LookupOp(lt, null);
                
                lkop.filter(imgSource, imgSource);

                vi.getLienzo().setImagen(imgSource);
                vi.getLienzo().repaint();
            }catch(IllegalArgumentException e){
                System.err.println(e.getLocalizedMessage());
            }
        }
    }//GEN-LAST:event_negativoBotonActionPerformed

    private void absolutoBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_absolutoBotonActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorioTrabajo.getSelectedFrame());
    
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImagen();
            try{
                LookupTable lt = LookupTableCreator.absoluto();
                
                LookupOp lkop = new LookupOp(lt, null);
                
                lkop.filter(imgSource, imgSource);

                vi.getLienzo().setImagen(imgSource);
                vi.getLienzo().repaint();
            }catch(IllegalArgumentException e){
                System.err.println(e.getLocalizedMessage());
            }
        }
    }//GEN-LAST:event_absolutoBotonActionPerformed

    private void ImagenPiBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ImagenPiBotonActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorioTrabajo.getSelectedFrame());
    
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImagen();
            try{
                ImagePiOp Piop = new ImagePiOp();
                
                Piop.filter(imgSource, imgSource);

                vi.getLienzo().setImagen(imgSource);
                vi.getLienzo().repaint();
            }catch(IllegalArgumentException e){
                System.err.println(e.getLocalizedMessage());
            }
        }
    }//GEN-LAST:event_ImagenPiBotonActionPerformed

    private void minimoBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minimoBotonActionPerformed
        VentanaInternaImagen vi = (VentanaInternaImagen) (escritorioTrabajo.getSelectedFrame());
    
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImagen();
            try{
                MaxMinOp mop = new MaxMinOp();
                
                mop.filter(imgSource, imgSource);

                vi.getLienzo().setImagen(imgSource);
                vi.getLienzo().repaint();
            }catch(IllegalArgumentException e){
                System.err.println(e.getLocalizedMessage());
            }
        }
    }//GEN-LAST:event_minimoBotonActionPerformed

    private void webcamMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_webcamMenuActionPerformed
        VentanaInternaCamara vicam = VentanaInternaCamara.getInstance(this);
                
        escritorioTrabajo.add(vicam);
        
        vicam.setVisible(true);
    }//GEN-LAST:event_webcamMenuActionPerformed

    private void convolucionCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convolucionCBActionPerformed
        this.aplicarConvolucion(convolucionCB.getSelectedIndex());
    }//GEN-LAST:event_convolucionCBActionPerformed

    private void webcamBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_webcamBotonActionPerformed
        VentanaInternaCamara vicam = VentanaInternaCamara.getInstance(this);
        
        escritorioTrabajo.add(vicam);
        
        vicam.setVisible(true);
    }//GEN-LAST:event_webcamBotonActionPerformed

    private void verBarraSonidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verBarraSonidoActionPerformed
        sonidoBarraHerramienta.setVisible(verBarraSonido.getState());
    }//GEN-LAST:event_verBarraSonidoActionPerformed

    private void verBarraImagenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verBarraImagenActionPerformed
        imagenPanel.setVisible(verBarraImagen.getState());
    }//GEN-LAST:event_verBarraImagenActionPerformed

    /**
     * Clase "Listener" que implementa la interfaz PropertyChangeListener
     * para que si alguna propiedad de la VentanaPrincipal cambia se actualice 
     * los diferentes componentes de la interfaz (botones, herramientas, comboboxes, etc...).
     */
    public class FocusManagerListener implements PropertyChangeListener {
        @Override
        public void propertyChange(PropertyChangeEvent e) {
            if(escritorioTrabajo.getSelectedFrame() instanceof VentanaInternaImagen){
                VentanaInternaImagen vi;
                vi = (VentanaInternaImagen)escritorioTrabajo.getSelectedFrame();
                
                barraInferior.setVisible(true);

                Canvas lienzo = null;

                if(vi != null)
                    lienzo = vi.getLienzo();

                String herramienta;

                if(lienzo != null){
                    editarHerramienta.setSelected(lienzo.getEdit());

                    alisadoHerramienta.setSelected(lienzo.getAliasing());

                    rellenoHerramienta.setSelected(lienzo.getFill());

                    transparenciaHerramienta.setValue(lienzo.getTransparency());
                    
                    discontHerramienta.setSelected(lienzo.getDiscontStroke());

                    grosorSpinner.setValue(lienzo.getThickness());

                    if(!lienzo.getEdit()){
                        herramienta = lienzo.getTool();

                        switch(herramienta){
                            case "punto":
                                puntoHerramienta.setSelected(true);
                                break;
                            case "linea":
                                lineaHerramienta.setSelected(true);
                                break;
                            case "rectangulo":
                                rectanguloHerramienta.setSelected(true);
                                break;
                            case "elipse":
                                elipseHerramienta.setSelected(true);
                                break;
                            case "trazo":
                                trazoHerramienta.setSelected(true);
                                break;
                            case "area":
                                areaBoton.setSelected(true);
                                break;
                            case "cuadratica":
                                quadHerramienta.setSelected(true);
                        }
                    }
                }                
            }
            else { 
                barraInferior.setVisible(false);
            }
        }
    }
    
    /**
     * Clase "Listener" que se encarga de manejar los eventos generados por un Line de tipo 
     * Audio. En este contexto se asocia al objeto "player" de la clase SMClipPlayer.
     */
    
    private class AudioListener implements LineListener {
        @Override
        public void update(LineEvent event) {            
            if (event.getType() == LineEvent.Type.START) {
                reproducirBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/pausa24x24.png")));
            } 
            if (event.getType() == LineEvent.Type.STOP) {      
                reproducirBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/play24x24.png")));
                
                if(((Clip) event.getLine()).getMicrosecondPosition() == ((Clip) event.getLine()).getMicrosecondLength())
                    player.stop();                                    
            }
            if (event.getType() == LineEvent.Type.CLOSE){
                reproducirBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/play24x24.png")));

                player = null;
                
                barraTiempoSonido.setValue(0);
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ImagenPiBoton;
    private javax.swing.JMenuItem aboutMeMenu;
    private javax.swing.JMenuItem abrirArchivo;
    private javax.swing.JButton abrirArchivoBoton;
    private javax.swing.JButton absolutoBoton;
    private javax.swing.JToggleButton alisadoHerramienta;
    private javax.swing.JLabel alphaLabel;
    private javax.swing.JMenu archivoMenu;
    private javax.swing.JToggleButton areaBoton;
    private javax.swing.JButton aumentarBoton;
    private javax.swing.JMenu ayudaMenu;
    private javax.swing.JToolBar barraHerramientas;
    private javax.swing.JPanel barraInferior;
    private javax.swing.JMenuBar barraMenu;
    private javax.swing.JProgressBar barraTiempoSonido;
    private javax.swing.JLabel brilloAltoLabel;
    private javax.swing.JLabel brilloBajoLabel;
    private javax.swing.JSlider brilloSlider;
    private javax.swing.JMenuItem cambiarTamMenu;
    private javax.swing.JComboBox<String> colorCBRelleno;
    private javax.swing.JComboBox<String> colorCBTrazo;
    private javax.swing.JMenu colorMenu;
    private javax.swing.JMenuItem combinarBandasMenu;
    private javax.swing.JButton contrasteNormalBoton;
    private javax.swing.JMenuItem convertirColorMenu;
    private javax.swing.JComboBox<String> convolucionCB;
    private javax.swing.JButton degradadoHerramienta;
    private javax.swing.JButton descomponerBandasBoton;
    private javax.swing.JToggleButton discontHerramienta;
    private javax.swing.JButton disminuirBoton;
    private javax.swing.JButton duplicarBoton;
    private javax.swing.JToggleButton editarHerramienta;
    private javax.swing.JToggleButton elipseHerramienta;
    private javax.swing.JLabel escalarLabel;
    private javax.swing.JDesktopPane escritorioTrabajo;
    private javax.swing.JComboBox<String> espacioColorCB;
    private javax.swing.JButton grabarBoton;
    private javax.swing.JSpinner grosorSpinner;
    private javax.swing.ButtonGroup grupoHerramientas;
    private javax.swing.JMenuItem guardarArchivo;
    private javax.swing.JButton guardarArchivoBoton;
    private javax.swing.JLabel herramientaText;
    private javax.swing.JButton iluminarBoton;
    private javax.swing.JMenu imagenMenu;
    private javax.swing.JPanel imagenPanel;
    private javax.swing.JPanel infoPanel;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator10;
    private javax.swing.JToolBar.Separator jSeparator11;
    private javax.swing.JToolBar.Separator jSeparator12;
    private javax.swing.JToolBar.Separator jSeparator13;
    private javax.swing.JToolBar.Separator jSeparator14;
    private javax.swing.JToolBar.Separator jSeparator15;
    private javax.swing.JToolBar.Separator jSeparator16;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator4;
    private javax.swing.JToolBar.Separator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JToolBar.Separator jSeparator7;
    private javax.swing.JToolBar.Separator jSeparator8;
    private javax.swing.JToolBar.Separator jSeparator9;
    private javax.swing.JToggleButton lineaHerramienta;
    private javax.swing.JComboBox<File> listaReproduccionCB;
    private javax.swing.JMenuItem menuBrillo;
    private javax.swing.JMenuItem menuConvolucion;
    private javax.swing.JMenuItem menuLookUp;
    private javax.swing.JMenuItem menuSeno;
    private javax.swing.JButton minimoBoton;
    private javax.swing.JLabel mousePosicionText;
    private javax.swing.JButton negativoBoton;
    private javax.swing.JMenuItem nuevoArchivo;
    private javax.swing.JButton nuevoArchivoBoton;
    private javax.swing.JButton oscurecimientoBoton;
    private javax.swing.JButton pausarBoton;
    private javax.swing.JToggleButton puntoHerramienta;
    private javax.swing.JToggleButton quadHerramienta;
    private javax.swing.JToggleButton rectanguloHerramienta;
    private javax.swing.JToggleButton rellenoHerramienta;
    private javax.swing.JLabel rellenoLabel;
    private javax.swing.JButton reproducirBoton;
    private javax.swing.JButton rotacion180Boton;
    private javax.swing.JButton rotacion270Boton;
    private javax.swing.JButton rotacion90Boton;
    private javax.swing.JLabel rotacionLabel;
    private javax.swing.JSlider rotacionSlider;
    private javax.swing.JMenuItem selectorColorMenu;
    private javax.swing.JButton senoBoton;
    private javax.swing.JButton sepiaBoton;
    private javax.swing.JToolBar sonidoBarraHerramienta;
    private javax.swing.JSlider transparenciaHerramienta;
    private javax.swing.JToggleButton trazoHerramienta;
    private javax.swing.JLabel trazoLabel;
    private javax.swing.JCheckBoxMenuItem verBarraAtributos;
    private javax.swing.JCheckBoxMenuItem verBarraEstado;
    private javax.swing.JCheckBoxMenuItem verBarraFormas;
    private javax.swing.JCheckBoxMenuItem verBarraImagen;
    private javax.swing.JCheckBoxMenuItem verBarraSonido;
    private javax.swing.JMenu verMenu;
    private javax.swing.JButton webcamBoton;
    private javax.swing.JMenuItem webcamMenu;
    // End of variables declaration//GEN-END:variables
}
