package paintbasico2d;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.KeyboardFocusManager;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.Transparency;
import java.awt.color.ColorSpace;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.ColorConvertOp;
import java.awt.image.ColorModel;
import java.awt.image.ComponentColorModel;
import java.awt.image.ConvolveOp;
import java.awt.image.DataBuffer;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.LookupTable;
import java.awt.image.RescaleOp;
import java.awt.image.WritableRaster;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.activation.UnsupportedDataTypeException;
import javax.imageio.ImageIO;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import static javax.swing.JOptionPane.showMessageDialog;
import javax.swing.filechooser.FileNameExtensionFilter;
import sm.image.KernelProducer;
import sm.image.LookupTableProducer;
import sm.vpc.imagen.SepiaOp;
import sm.vpc.imagen.imagenUtils;
import sm.vpc.iu.ListCeldaColor;
import sm.vpc.iu.Lienzo2D;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author VÃ­ctor Padi
 */
public class MainWindow extends javax.swing.JFrame {
    private ventanaDimensionImagen ventDim;
    private BufferedImage imgFuente;
    private final Color[] listaColores = {Color.BLACK, Color.BLUE, Color.RED, Color.YELLOW, Color.WHITE
                                          , Color.ORANGE, Color.GREEN, Color.PINK};
    
    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
        
        ventDim = new ventanaDimensionImagen(this, rootPaneCheckingEnabled);
        
        colorCB.setSelectedIndex(0);
        
        KeyboardFocusManager focusManager = KeyboardFocusManager.getCurrentKeyboardFocusManager();
        focusManager.addPropertyChangeListener(new FocusManagerListener());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grupoHerramientas = new javax.swing.ButtonGroup();
        jSeparator1 = new javax.swing.JSeparator();
        barraInferior = new javax.swing.JPanel();
        infoPanel = new javax.swing.JPanel();
        herramientaText = new javax.swing.JLabel();
        mousePosicionText = new javax.swing.JLabel();
        atributosPanel = new javax.swing.JPanel();
        brilloPanel = new javax.swing.JPanel();
        brilloSlider = new javax.swing.JSlider();
        filtroPanel = new javax.swing.JPanel();
        convolucionCB = new javax.swing.JComboBox<>();
        contrastePanel = new javax.swing.JPanel();
        contrasteNormalBoton = new javax.swing.JButton();
        iluminarBoton = new javax.swing.JButton();
        oscurecimientoBoton = new javax.swing.JButton();
        senoPanel = new javax.swing.JPanel();
        senoBoton = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        espacioColorPanel = new javax.swing.JPanel();
        descomponerBandasBoton = new javax.swing.JButton();
        espacioColorCB = new javax.swing.JComboBox<>();
        rotacionPanel = new javax.swing.JPanel();
        rotacionSlider = new javax.swing.JSlider();
        rotacion90Boton = new javax.swing.JButton();
        rotacion180Boton = new javax.swing.JButton();
        rotacion270Boton = new javax.swing.JButton();
        escaladoPanel = new javax.swing.JPanel();
        aumentarBoton = new javax.swing.JButton();
        disminuirBoton = new javax.swing.JButton();
        barraHerramientas = new javax.swing.JToolBar();
        nuevoArchivoBoton = new javax.swing.JButton();
        abrirArchivoBoton = new javax.swing.JButton();
        guardarArchivoBoton = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        puntoHerramienta = new javax.swing.JToggleButton();
        lineaHerramienta = new javax.swing.JToggleButton();
        rectanguloHerramienta = new javax.swing.JToggleButton();
        elipseHerramienta = new javax.swing.JToggleButton();
        editarHerramienta = new javax.swing.JToggleButton();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        colorCB = new JComboBox(listaColores);
        colorCB.setRenderer(new ListCeldaColor());
        jSeparator5 = new javax.swing.JToolBar.Separator();
        grosorSpinner = new javax.swing.JSpinner();
        rellenoHerramienta = new javax.swing.JToggleButton();
        alisadoHerramienta = new javax.swing.JToggleButton();
        transparenciaHerramienta = new javax.swing.JToggleButton();
        escritorioTrabajo = new javax.swing.JDesktopPane();
        barraMenu = new javax.swing.JMenuBar();
        archivoMenu = new javax.swing.JMenu();
        nuevoArchivo = new javax.swing.JMenuItem();
        abrirArchivo = new javax.swing.JMenuItem();
        guardarArchivo = new javax.swing.JMenuItem();
        verMenu = new javax.swing.JMenu();
        verBarraEstado = new javax.swing.JCheckBoxMenuItem();
        verBarraAtributos = new javax.swing.JCheckBoxMenuItem();
        verBarraFormas = new javax.swing.JCheckBoxMenuItem();
        imagenMenu = new javax.swing.JMenu();
        cambiarTamMenu = new javax.swing.JMenuItem();
        menuBrillo = new javax.swing.JMenuItem();
        menuConvolucion = new javax.swing.JMenuItem();
        menuLookUp = new javax.swing.JMenuItem();
        menuSeno = new javax.swing.JMenuItem();
        combinarBandasMenu = new javax.swing.JMenuItem();
        convertirColorMenu = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        barraInferior.setLayout(new java.awt.BorderLayout());

        infoPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        infoPanel.setAlignmentX(0.1F);
        infoPanel.setFocusable(false);
        infoPanel.setLayout(new java.awt.BorderLayout());

        herramientaText.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        infoPanel.add(herramientaText, java.awt.BorderLayout.LINE_START);
        infoPanel.add(mousePosicionText, java.awt.BorderLayout.LINE_END);

        barraInferior.add(infoPanel, java.awt.BorderLayout.PAGE_END);

        atributosPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEFT));

        brilloPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED), "Brillo"));
        brilloPanel.setPreferredSize(new java.awt.Dimension(224, 65));

        brilloSlider.setMaximum(255);
        brilloSlider.setMinimum(-255);
        brilloSlider.setValue(0);
        brilloSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                brilloSliderStateChanged(evt);
            }
        });
        brilloSlider.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                brilloSliderFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                brilloSliderFocusLost(evt);
            }
        });

        javax.swing.GroupLayout brilloPanelLayout = new javax.swing.GroupLayout(brilloPanel);
        brilloPanel.setLayout(brilloPanelLayout);
        brilloPanelLayout.setHorizontalGroup(
            brilloPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(brilloPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(brilloSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        brilloPanelLayout.setVerticalGroup(
            brilloPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, brilloPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(brilloSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40))
        );

        atributosPanel.add(brilloPanel);

        filtroPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED), "Filtro"));

        convolucionCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Media", "Binomial", "Enfoque", "Relieve", "Laplaciano" }));
        convolucionCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                convolucionCBActionPerformed(evt);
            }
        });
        filtroPanel.add(convolucionCB);

        atributosPanel.add(filtroPanel);

        contrastePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED), "Contraste"));

        contrasteNormalBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/contraste.png"))); // NOI18N
        contrasteNormalBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contrasteNormalBotonActionPerformed(evt);
            }
        });
        contrastePanel.add(contrasteNormalBoton);

        iluminarBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/iluminar.png"))); // NOI18N
        iluminarBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iluminarBotonActionPerformed(evt);
            }
        });
        contrastePanel.add(iluminarBoton);

        oscurecimientoBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/oscurecer.png"))); // NOI18N
        oscurecimientoBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oscurecimientoBotonActionPerformed(evt);
            }
        });
        contrastePanel.add(oscurecimientoBoton);

        atributosPanel.add(contrastePanel);

        senoPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED), "Efectos"));
        senoPanel.setPreferredSize(new java.awt.Dimension(160, 67));

        senoBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/sinusoidal.png"))); // NOI18N
        senoBoton.setToolTipText("");
        senoBoton.setPreferredSize(new java.awt.Dimension(62, 35));
        senoBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                senoBotonActionPerformed(evt);
            }
        });
        senoPanel.add(senoBoton);

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/sepia.png"))); // NOI18N
        senoPanel.add(jButton1);

        atributosPanel.add(senoPanel);

        espacioColorPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED), "Color"));

        descomponerBandasBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/bandas.png"))); // NOI18N
        descomponerBandasBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                descomponerBandasBotonActionPerformed(evt);
            }
        });
        espacioColorPanel.add(descomponerBandasBoton);

        espacioColorCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "RGB", "YCC", "GREY" }));
        espacioColorCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                espacioColorCBActionPerformed(evt);
            }
        });
        espacioColorPanel.add(espacioColorCB);

        atributosPanel.add(espacioColorPanel);

        rotacionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED), "RotaciÃ³n"));
        rotacionPanel.setPreferredSize(new java.awt.Dimension(380, 65));

        rotacionSlider.setMaximum(360);
        rotacionSlider.setToolTipText("");
        rotacionSlider.setValue(0);
        rotacionSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                rotacionSliderStateChanged(evt);
            }
        });
        rotacionSlider.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                rotacionSliderFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                rotacionSliderFocusLost(evt);
            }
        });
        rotacionPanel.add(rotacionSlider);

        rotacion90Boton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rotacion90.png"))); // NOI18N
        rotacion90Boton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotacion90BotonActionPerformed(evt);
            }
        });
        rotacionPanel.add(rotacion90Boton);

        rotacion180Boton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rotacion180.png"))); // NOI18N
        rotacion180Boton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotacion180BotonActionPerformed(evt);
            }
        });
        rotacionPanel.add(rotacion180Boton);

        rotacion270Boton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rotacion270.png"))); // NOI18N
        rotacion270Boton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotacion270BotonActionPerformed(evt);
            }
        });
        rotacionPanel.add(rotacion270Boton);

        atributosPanel.add(rotacionPanel);

        escaladoPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED), "Escala"));

        aumentarBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/aumentar.png"))); // NOI18N
        aumentarBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aumentarBotonActionPerformed(evt);
            }
        });
        escaladoPanel.add(aumentarBoton);

        disminuirBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/disminuir.png"))); // NOI18N
        disminuirBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disminuirBotonActionPerformed(evt);
            }
        });
        escaladoPanel.add(disminuirBoton);

        atributosPanel.add(escaladoPanel);

        barraInferior.add(atributosPanel, java.awt.BorderLayout.CENTER);

        getContentPane().add(barraInferior, java.awt.BorderLayout.PAGE_END);

        barraHerramientas.setRollover(true);

        nuevoArchivoBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/nuevo.png"))); // NOI18N
        nuevoArchivoBoton.setToolTipText("Crea un nueva venta en blanco");
        nuevoArchivoBoton.setFocusable(false);
        nuevoArchivoBoton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        nuevoArchivoBoton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        nuevoArchivoBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoArchivoBotonActionPerformed(evt);
            }
        });
        barraHerramientas.add(nuevoArchivoBoton);

        abrirArchivoBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/abrir.png"))); // NOI18N
        abrirArchivoBoton.setToolTipText("Abre un archivo y lo carga en una ventana nueva");
        abrirArchivoBoton.setFocusable(false);
        abrirArchivoBoton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        abrirArchivoBoton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        abrirArchivoBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirArchivoBotonActionPerformed(evt);
            }
        });
        barraHerramientas.add(abrirArchivoBoton);

        guardarArchivoBoton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/guardar.png"))); // NOI18N
        guardarArchivoBoton.setToolTipText("Guarda la ventana seleccionada en una imagen");
        guardarArchivoBoton.setFocusable(false);
        guardarArchivoBoton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        guardarArchivoBoton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        guardarArchivoBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarArchivoBotonActionPerformed(evt);
            }
        });
        barraHerramientas.add(guardarArchivoBoton);
        barraHerramientas.add(jSeparator2);

        grupoHerramientas.add(puntoHerramienta);
        puntoHerramienta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/punto.png"))); // NOI18N
        puntoHerramienta.setToolTipText(" Herramienta punto (cuadrado)");
        puntoHerramienta.setFocusable(false);
        puntoHerramienta.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        puntoHerramienta.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        puntoHerramienta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                puntoHerramientaActionPerformed(evt);
            }
        });
        barraHerramientas.add(puntoHerramienta);

        grupoHerramientas.add(lineaHerramienta);
        lineaHerramienta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/linea.png"))); // NOI18N
        lineaHerramienta.setToolTipText("Dibuja una lÃ­nea desde un primer punto seleccionado hasta donde se arrastre el ratÃ³n");
        lineaHerramienta.setFocusable(false);
        lineaHerramienta.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lineaHerramienta.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        lineaHerramienta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lineaHerramientaActionPerformed(evt);
            }
        });
        barraHerramientas.add(lineaHerramienta);

        grupoHerramientas.add(rectanguloHerramienta);
        rectanguloHerramienta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rectangulo.png"))); // NOI18N
        rectanguloHerramienta.setToolTipText("Herramienta para dibujar un cuadrado");
        rectanguloHerramienta.setFocusable(false);
        rectanguloHerramienta.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        rectanguloHerramienta.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        rectanguloHerramienta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rectanguloHerramientaActionPerformed(evt);
            }
        });
        barraHerramientas.add(rectanguloHerramienta);

        grupoHerramientas.add(elipseHerramienta);
        elipseHerramienta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/elipse.png"))); // NOI18N
        elipseHerramienta.setToolTipText("Herramienta para dibujar una elipse");
        elipseHerramienta.setFocusable(false);
        elipseHerramienta.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        elipseHerramienta.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        elipseHerramienta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                elipseHerramientaActionPerformed(evt);
            }
        });
        barraHerramientas.add(elipseHerramienta);

        grupoHerramientas.add(editarHerramienta);
        editarHerramienta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/seleccion.png"))); // NOI18N
        editarHerramienta.setToolTipText("Herramienta para recolocar figuras");
        editarHerramienta.setFocusable(false);
        editarHerramienta.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        editarHerramienta.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        editarHerramienta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editarHerramientaActionPerformed(evt);
            }
        });
        barraHerramientas.add(editarHerramienta);
        barraHerramientas.add(jSeparator3);

        colorCB.setMaximumSize(new java.awt.Dimension(50, 50));
        colorCB.setMinimumSize(new java.awt.Dimension(33, 50));
        colorCB.setPreferredSize(new java.awt.Dimension(55, 36));
        colorCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorCBActionPerformed(evt);
            }
        });
        barraHerramientas.add(colorCB);
        barraHerramientas.add(jSeparator5);

        grosorSpinner.setMaximumSize(new java.awt.Dimension(50, 36));
        grosorSpinner.setPreferredSize(new java.awt.Dimension(50, 36));
        grosorSpinner.setValue(1);
        grosorSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                grosorSpinnerStateChanged(evt);
            }
        });
        barraHerramientas.add(grosorSpinner);

        rellenoHerramienta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rellenar.png"))); // NOI18N
        rellenoHerramienta.setToolTipText("Activar el relleno de las figuras");
        rellenoHerramienta.setFocusable(false);
        rellenoHerramienta.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        rellenoHerramienta.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        rellenoHerramienta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rellenoHerramientaActionPerformed(evt);
            }
        });
        barraHerramientas.add(rellenoHerramienta);

        alisadoHerramienta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/alisar.png"))); // NOI18N
        alisadoHerramienta.setToolTipText("Activa el suavizado de bordes");
        alisadoHerramienta.setFocusable(false);
        alisadoHerramienta.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        alisadoHerramienta.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        alisadoHerramienta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alisadoHerramientaActionPerformed(evt);
            }
        });
        barraHerramientas.add(alisadoHerramienta);

        transparenciaHerramienta.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/transparencia.png"))); // NOI18N
        transparenciaHerramienta.setToolTipText("Activa la transparencia de figuras (alfa = 0.5)");
        transparenciaHerramienta.setFocusable(false);
        transparenciaHerramienta.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        transparenciaHerramienta.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        transparenciaHerramienta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transparenciaHerramientaActionPerformed(evt);
            }
        });
        barraHerramientas.add(transparenciaHerramienta);

        getContentPane().add(barraHerramientas, java.awt.BorderLayout.PAGE_START);

        escritorioTrabajo.setName(""); // NOI18N

        javax.swing.GroupLayout escritorioTrabajoLayout = new javax.swing.GroupLayout(escritorioTrabajo);
        escritorioTrabajo.setLayout(escritorioTrabajoLayout);
        escritorioTrabajoLayout.setHorizontalGroup(
            escritorioTrabajoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1287, Short.MAX_VALUE)
        );
        escritorioTrabajoLayout.setVerticalGroup(
            escritorioTrabajoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 482, Short.MAX_VALUE)
        );

        getContentPane().add(escritorioTrabajo, java.awt.BorderLayout.CENTER);

        archivoMenu.setText("Archivo");

        nuevoArchivo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        nuevoArchivo.setText("Nuevo");
        nuevoArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoArchivoActionPerformed(evt);
            }
        });
        archivoMenu.add(nuevoArchivo);

        abrirArchivo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        abrirArchivo.setText("Abrir");
        abrirArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirArchivoActionPerformed(evt);
            }
        });
        archivoMenu.add(abrirArchivo);

        guardarArchivo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        guardarArchivo.setText("Guardar");
        guardarArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarArchivoActionPerformed(evt);
            }
        });
        archivoMenu.add(guardarArchivo);

        barraMenu.add(archivoMenu);

        verMenu.setText("Ver");

        verBarraEstado.setSelected(true);
        verBarraEstado.setText("Barra de estado");
        verBarraEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verBarraEstadoActionPerformed(evt);
            }
        });
        verMenu.add(verBarraEstado);

        verBarraAtributos.setSelected(true);
        verBarraAtributos.setText("Barra de atributos");
        verBarraAtributos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verBarraAtributosActionPerformed(evt);
            }
        });
        verMenu.add(verBarraAtributos);

        verBarraFormas.setSelected(true);
        verBarraFormas.setText("Barra de Formas");
        verBarraFormas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verBarraFormasActionPerformed(evt);
            }
        });
        verMenu.add(verBarraFormas);

        barraMenu.add(verMenu);

        imagenMenu.setText("Imagen");

        cambiarTamMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.CTRL_MASK));
        cambiarTamMenu.setText("Cambiar tamaÃ±o de la imÃ¡gen");
        cambiarTamMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cambiarTamMenuActionPerformed(evt);
            }
        });
        imagenMenu.add(cambiarTamMenu);

        menuBrillo.setText("Cambiar brillo de la imÃ¡gen");
        menuBrillo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuBrilloActionPerformed(evt);
            }
        });
        imagenMenu.add(menuBrillo);

        menuConvolucion.setText("Aplicar convoluciÃ³n a la imÃ¡gen");
        menuConvolucion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuConvolucionActionPerformed(evt);
            }
        });
        imagenMenu.add(menuConvolucion);

        menuLookUp.setText("Aplicar operaciÃ³n LookUp");
        menuLookUp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuLookUpActionPerformed(evt);
            }
        });
        imagenMenu.add(menuLookUp);

        menuSeno.setText("Aplicar funciÃ³n Seno");
        menuSeno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuSenoActionPerformed(evt);
            }
        });
        imagenMenu.add(menuSeno);

        combinarBandasMenu.setText("Descomponer en bandas la imagen ");
        combinarBandasMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combinarBandasMenuActionPerformed(evt);
            }
        });
        imagenMenu.add(combinarBandasMenu);

        convertirColorMenu.setText("Cambiar a espacio de color YCC");
        convertirColorMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                convertirColorMenuActionPerformed(evt);
            }
        });
        imagenMenu.add(convertirColorMenu);

        barraMenu.add(imagenMenu);

        setJMenuBar(barraMenu);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    

    private void nuevaVentana(){
        ventanaInterna vi = new ventanaInterna(this, ventDim.getAncho(), ventDim.getAlto());
       
        escritorioTrabajo.add(vi);
        vi.setVisible(true);
        
        BufferedImage img;
        img = new BufferedImage(ventDim.getAncho(), ventDim.getAlto(),BufferedImage.TYPE_INT_RGB);
        
        Graphics2D g2d = img.createGraphics();
        
        g2d.setColor(Color.white);
        g2d.fill(new Rectangle(new Dimension(ventDim.getAncho(), ventDim.getAlto())));
        
        vi.getLienzo().setImagen(img);
                
        puntoHerramienta.doClick();
        
        grosorSpinner.setValue(1);
        
        rellenoHerramienta.setSelected(false);
        alisadoHerramienta.setSelected(false);
        transparenciaHerramienta.setSelected(false);
    }
    
    private void descomponerEnBandas(){
        ventanaInterna vi_original = (ventanaInterna) (escritorioTrabajo.getSelectedFrame());
    
        if (vi_original != null) {
            BufferedImage img = vi_original.getLienzo().getImagen();

            if(img != null){
                int NumBandas = img.getColorModel().getNumColorComponents();

                for (int iBanda = 0; iBanda < NumBandas; iBanda++){
                    //Creamos el modelo de color de la nueva imagen basado en un espcio de color GRAY
                    ColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_GRAY);
                    ComponentColorModel cm = new ComponentColorModel(cs, false, false, Transparency.OPAQUE, DataBuffer.TYPE_BYTE);

                    //Creamos el nuevo raster a partir del raster de la imagen original
                    int bandList[] = {iBanda};
                    WritableRaster bandRaster = (WritableRaster)img.getRaster().createWritableChild(0,0,
                    img.getWidth(), img.getHeight(), 0, 0, bandList);

                    //Creamos una nueva imagen que contiene como raster el correspondiente a la banda
                    BufferedImage imgBanda = new BufferedImage(cm, bandRaster, false, null);

                    //Creamos la ventana interna nueva con la imagen de fondo de la banda
                    ventanaInterna vi = new ventanaInterna(this, img.getWidth(), img.getHeight());

                    vi.getLienzo().setImagen(imgBanda);
                    this.escritorioTrabajo.add(vi);
                    vi.setTitle(vi_original.getTitle() + '[' + iBanda + ']');
                    vi.setVisible(true);
                }
            }
        }
    }
    
    private void cambiarEspacioColor(String espacioColor){
        ventanaInterna vi_original = (ventanaInterna) (escritorioTrabajo.getSelectedFrame());
    
        if (vi_original != null) {
            BufferedImage img = vi_original.getLienzo().getImagen();
            
            if(img != null){
                BufferedImage imgOut = null;
                ColorConvertOp cop;
                ColorSpace cs;
                
                if(img.getColorModel().getColorSpace().isCS_sRGB() && !espacioColor.equals("RGB")){
                    if(espacioColor.equals("YCC"))
                        cs = ColorSpace.getInstance(ColorSpace.CS_PYCC);
                    else
                        cs = ColorSpace.getInstance(ColorSpace.CS_GRAY);
                    
                    cop = new ColorConvertOp(cs, null);
                    
                    imgOut = cop.filter(img, null);
                }
                
                else if(img.getColorModel().getColorSpace().getType() == ColorSpace.TYPE_YCbCr && !espacioColor.equals("YCC")){
                    if(espacioColor.equals("RGB"))
                        cs = ColorSpace.getInstance(ColorSpace.CS_sRGB);
                    else
                        cs = ColorSpace.getInstance(ColorSpace.CS_GRAY);
                    
                    cop = new ColorConvertOp(cs, null);
                    
                    imgOut = cop.filter(img, null);
                }
                else if(img.getColorModel().getColorSpace().getType() == ColorSpace.CS_GRAY && !espacioColor.equals("GREY")){
                    if(espacioColor.equals("RGB"))
                        cs = ColorSpace.getInstance(ColorSpace.CS_sRGB);
                    else
                        cs = ColorSpace.getInstance(ColorSpace.CS_PYCC);
                    
                    cop = new ColorConvertOp(cs, null);
                    
                    imgOut = cop.filter(img, null);
                }
                
                if(imgOut != null){
                    //Creamos la ventana interna nueva con la imagen en el nuevo espacio de color
                    ventanaInterna vi = new ventanaInterna(this, img.getWidth(), img.getHeight());

                    vi.getLienzo().setImagen(imgOut);
                    this.escritorioTrabajo.add(vi);

                    vi.setTitle(vi_original.getTitle() + '[' + espacioColor + ']');
                    vi.setVisible(true);
                }
            }
        }
    }
    
    private BufferedImage aplicarRotacion(BufferedImage img, double grados){
        double r = Math.toRadians(grados);
        Point p = new Point(img.getWidth()/2, img.getHeight()/2);
        AffineTransform at = AffineTransform.getRotateInstance(r,p.x,p.y);
        AffineTransformOp atop;

        atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
        BufferedImage imgDest = atop.filter(img, null);

        return imgDest;
    }
    
    private BufferedImage aplicarEscalado(BufferedImage img, double esc){
        AffineTransform at = AffineTransform.getScaleInstance(esc, esc);
        AffineTransformOp atop;

        atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);

        return atop.filter(img, null);
    }
    
    private void abrirArchivo() throws IOException{
        JFileChooser dlg = new JFileChooser();
        FileNameExtensionFilter filtroArch = new FileNameExtensionFilter("Imagenes(*.jpg, *.gif, *.png, *.bmp, *.jpeg, *.wbmp)",
                                                                         "jpg", "gif", "png", "jpeg", "bmp", "wbmp");
        
        dlg.setFileFilter(filtroArch);
        
        int resp = dlg.showOpenDialog(this);
        
        if( resp == JFileChooser.APPROVE_OPTION) {
            File f = dlg.getSelectedFile();
            BufferedImage img = ImageIO.read(f);
            
            ventanaInterna vi = new ventanaInterna(this, img.getWidth(), img.getHeight());
            
            vi.getLienzo().setImagen(img);
            this.escritorioTrabajo.add(vi);
            vi.setTitle(f.getName());
            vi.setVisible(true);
        }
    }
    
    private void guardarArchivo() throws IOException{
        ventanaInterna vi=(ventanaInterna) escritorioTrabajo.getSelectedFrame();
        
        if(vi != null){
            JFileChooser dlg = new JFileChooser();
            FileNameExtensionFilter filtroArch = new FileNameExtensionFilter("Imagenes(*.jpg, *.gif, *.png, *.bmp, *.jpeg, *.wbmp)",
                                                                             "jpg", "gif", "png", "jpeg", "bmp", "wbmp");
        
            dlg.setFileFilter(filtroArch);

            int resp = dlg.showSaveDialog(this);
        
            if(resp == JFileChooser.APPROVE_OPTION) {
                try{
                    BufferedImage img = vi.getLienzo().getImagen(true);
                    
                    File f = dlg.getSelectedFile();
                    
                    int ind = f.getName().lastIndexOf(".");
                    
                    String ext = "";
                    
                    if (ind > 0) {
                        ext = f.getName().substring(ind+1);
                    }

                    if (img != null) {
                        boolean esc_correcta = ImageIO.write(img, ext, f);
                        
                        if(esc_correcta)
                            vi.setTitle(f.getName());
                        else
                            throw new UnsupportedDataTypeException();
                    }
                } catch (javax.activation.UnsupportedDataTypeException ex) {
                    showMessageDialog(this, "El formato indicado es sopertado.", null, 0);
                }
            }
        }
    }
    
    private void nuevoArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoArchivoActionPerformed
        this.nuevaVentana();
    }//GEN-LAST:event_nuevoArchivoActionPerformed

    private void lineaHerramientaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lineaHerramientaActionPerformed
        ventanaInterna vi;
        vi = (ventanaInterna)escritorioTrabajo.getSelectedFrame();
        
        herramientaText.setText("LÃ­nea");

        if(vi != null)
            vi.getLienzo().setHerramienta("linea");
        
    }//GEN-LAST:event_lineaHerramientaActionPerformed

    private void puntoHerramientaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_puntoHerramientaActionPerformed
        ventanaInterna vi;
        vi = (ventanaInterna)escritorioTrabajo.getSelectedFrame();
    
        if(vi != null)
            vi.getLienzo().setHerramienta("punto");
        
        herramientaText.setText("Punto");
    }//GEN-LAST:event_puntoHerramientaActionPerformed

    private void rectanguloHerramientaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rectanguloHerramientaActionPerformed
        ventanaInterna vi;
        vi = (ventanaInterna)escritorioTrabajo.getSelectedFrame();
        
        if(vi != null)
            vi.getLienzo().setHerramienta("rectangulo");
        
        herramientaText.setText("Rectangulo");
    }//GEN-LAST:event_rectanguloHerramientaActionPerformed

    private void elipseHerramientaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_elipseHerramientaActionPerformed
        ventanaInterna vi;
        vi = (ventanaInterna)escritorioTrabajo.getSelectedFrame();
        
        if(vi != null)
            vi.getLienzo().setHerramienta("elipse");
        
        herramientaText.setText("Elipse");
    }//GEN-LAST:event_elipseHerramientaActionPerformed

    private void rellenoHerramientaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rellenoHerramientaActionPerformed
        ventanaInterna vi;
        vi = (ventanaInterna)escritorioTrabajo.getSelectedFrame();
        
        if(vi != null)
            vi.getLienzo().setRelleno(rellenoHerramienta.isSelected());
    }//GEN-LAST:event_rellenoHerramientaActionPerformed

    private void grosorSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_grosorSpinnerStateChanged
        ventanaInterna vi;
        vi = (ventanaInterna)escritorioTrabajo.getSelectedFrame();
       
        if(vi != null)
            vi.getLienzo().setGrosor((int)grosorSpinner.getValue());
    }//GEN-LAST:event_grosorSpinnerStateChanged

    private void alisadoHerramientaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alisadoHerramientaActionPerformed
        ventanaInterna vi;
        vi = (ventanaInterna)escritorioTrabajo.getSelectedFrame();
        
        if(vi != null)
            vi.getLienzo().setAlisado(alisadoHerramienta.isSelected());
    }//GEN-LAST:event_alisadoHerramientaActionPerformed

    private void transparenciaHerramientaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transparenciaHerramientaActionPerformed
        ventanaInterna vi;
        vi = (ventanaInterna)escritorioTrabajo.getSelectedFrame();
        
        if(vi != null)
            vi.getLienzo().setTransparencia(transparenciaHerramienta.isSelected());
    }//GEN-LAST:event_transparenciaHerramientaActionPerformed

    private void guardarArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarArchivoActionPerformed
        try {
            this.guardarArchivo();
        } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_guardarArchivoActionPerformed

    private void verBarraEstadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verBarraEstadoActionPerformed
       infoPanel.setVisible(verBarraEstado.getState());
    }//GEN-LAST:event_verBarraEstadoActionPerformed

    private void verBarraAtributosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verBarraAtributosActionPerformed
        grosorSpinner.setVisible(verBarraAtributos.getState());
        alisadoHerramienta.setVisible(verBarraAtributos.getState());
        rellenoHerramienta.setVisible(verBarraAtributos.getState());
        transparenciaHerramienta.setVisible(verBarraAtributos.getState());
        colorCB.setVisible(verBarraAtributos.getState());
    }//GEN-LAST:event_verBarraAtributosActionPerformed

    private void verBarraFormasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verBarraFormasActionPerformed
        puntoHerramienta.setVisible(verBarraFormas.getState());
        lineaHerramienta.setVisible(verBarraFormas.getState());
        rectanguloHerramienta.setVisible(verBarraFormas.getState());
        elipseHerramienta.setVisible(verBarraFormas.getState());
        editarHerramienta.setVisible(verBarraFormas.getState());
    }//GEN-LAST:event_verBarraFormasActionPerformed

    private void editarHerramientaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editarHerramientaActionPerformed
        ventanaInterna vi;
        vi = (ventanaInterna)escritorioTrabajo.getSelectedFrame();

        if(vi != null)
            vi.getLienzo().setEditar(editarHerramienta.isSelected());
        
        herramientaText.setText("Editar");
    }//GEN-LAST:event_editarHerramientaActionPerformed

    private void abrirArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirArchivoActionPerformed
        try {
            this.abrirArchivo();
        } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_abrirArchivoActionPerformed

    private void abrirArchivoBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirArchivoBotonActionPerformed
        try {
            this.abrirArchivo();
        } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_abrirArchivoBotonActionPerformed

    private void guardarArchivoBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarArchivoBotonActionPerformed
        try {
            this.guardarArchivo();
        } catch (IOException ex) {
            Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_guardarArchivoBotonActionPerformed

    private void nuevoArchivoBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoArchivoBotonActionPerformed
        this.nuevaVentana();
    }//GEN-LAST:event_nuevoArchivoBotonActionPerformed

    private void cambiarTamMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cambiarTamMenuActionPerformed
        ventDim.setVisible(true);
    }//GEN-LAST:event_cambiarTamMenuActionPerformed

    private void menuBrilloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuBrilloActionPerformed
        ventanaInterna vi = (ventanaInterna) (escritorioTrabajo.getSelectedFrame());

        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImagen();
           
            if(imgSource!=null){
                try{
                    RescaleOp rop = new RescaleOp(1.0F, 100.0F, null);
                    rop.filter(imgSource, imgSource);
                    vi.getLienzo().repaint();
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_menuBrilloActionPerformed

    private void menuConvolucionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuConvolucionActionPerformed
        this.aplicarConvolucion(0);
    }//GEN-LAST:event_menuConvolucionActionPerformed

    private void brilloSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_brilloSliderStateChanged
        ventanaInterna vi = (ventanaInterna) (escritorioTrabajo.getSelectedFrame());

        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImagen();
           
            if(imgSource!=null && imgFuente != null){
                try{
                    RescaleOp rop;
                    
                    if(imgFuente.getColorModel().hasAlpha()){
                        float[] factorEscalada = {1.0F,1.0F,1.0F,1.0F};
                        float[] offSet = {brilloSlider.getValue(), brilloSlider.getValue(), brilloSlider.getValue(), 0.0F};
                    
                        rop = new RescaleOp(factorEscalada, offSet, null);
                    }
                    else
                        rop = new RescaleOp(1.0F, brilloSlider.getValue(), null);
                    
                    rop.filter(imgFuente, imgSource);
                    
                    escritorioTrabajo.repaint();
                } catch(IllegalArgumentException e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }

    }//GEN-LAST:event_brilloSliderStateChanged

    private void brilloSliderFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_brilloSliderFocusGained
        ventanaInterna vi = (ventanaInterna)(escritorioTrabajo.getSelectedFrame());
        if(vi!=null){
            ColorModel cm = vi.getLienzo().getImagen().getColorModel();
            WritableRaster raster = vi.getLienzo().getImagen().copyData(null);
            boolean alfaPre = vi.getLienzo().getImagen().isAlphaPremultiplied();
        
            imgFuente = new BufferedImage(cm,raster,alfaPre,null);
        }
    }//GEN-LAST:event_brilloSliderFocusGained

    private void brilloSliderFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_brilloSliderFocusLost
        imgFuente = null;
        brilloSlider.setValue(0);
    }//GEN-LAST:event_brilloSliderFocusLost

    private void menuLookUpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuLookUpActionPerformed
        ventanaInterna vi = (ventanaInterna) (escritorioTrabajo.getSelectedFrame());
    
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImagen();
            try{
                LookupTable lt;
                lt=LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_SFUNCION);

                LookupOp lkop = new LookupOp(lt, null);

                lkop.filter(imgSource, imgSource);

                vi.getLienzo().setImagen(imgSource);
                vi.getLienzo().repaint();
            }catch(IllegalArgumentException e){
                System.err.println(e.getLocalizedMessage());
            }
        }
    }//GEN-LAST:event_menuLookUpActionPerformed

    private void contrasteNormalBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contrasteNormalBotonActionPerformed
        ventanaInterna vi = (ventanaInterna) (escritorioTrabajo.getSelectedFrame());
    
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImagen();
            try{
                LookupTable lt;
                lt=LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_SFUNCION);

                LookupOp lkop = new LookupOp(lt, null);
                
                lkop.filter(imgSource, imgSource);

                vi.getLienzo().setImagen(imgSource);
                vi.getLienzo().repaint();
            }catch(IllegalArgumentException e){
                System.err.println(e.getLocalizedMessage());
            }
        }
    }//GEN-LAST:event_contrasteNormalBotonActionPerformed

    private void iluminarBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iluminarBotonActionPerformed
        ventanaInterna vi = (ventanaInterna) (escritorioTrabajo.getSelectedFrame());
    
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImagen();
            try{
                LookupTable lt;
                lt=LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_LOGARITHM);

                LookupOp lkop = new LookupOp(lt, null);
                
                lkop.filter(imgSource, imgSource);

                vi.getLienzo().setImagen(imgSource);
                vi.getLienzo().repaint();
            }catch(IllegalArgumentException e){
                System.err.println(e.getLocalizedMessage());
            }
        }
    }//GEN-LAST:event_iluminarBotonActionPerformed

    private void oscurecimientoBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oscurecimientoBotonActionPerformed
        ventanaInterna vi = (ventanaInterna) (escritorioTrabajo.getSelectedFrame());
    
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImagen();
            try{
                LookupTable lt;
                lt=LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_POWER);

                LookupOp lkop = new LookupOp(lt, null);
                
                lkop.filter(imgSource, imgSource);

                vi.getLienzo().setImagen(imgSource);
                vi.getLienzo().repaint();
            }catch(IllegalArgumentException e){
                System.err.println(e.getLocalizedMessage());
            }
        }
    }//GEN-LAST:event_oscurecimientoBotonActionPerformed

    private void menuSenoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuSenoActionPerformed
        ventanaInterna vi = (ventanaInterna) (escritorioTrabajo.getSelectedFrame());
    
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImagen();
            try{
                double w = 180.0 / 255.0;
                LookupTable lt;
                
                lt=imagenUtils.seno(w);
                
                LookupOp lkop = new LookupOp(lt, null);
                
                lkop.filter(imgSource, imgSource);

                vi.getLienzo().setImagen(imgSource);
                vi.getLienzo().repaint();
            }catch(IllegalArgumentException e){
                System.err.println(e.getLocalizedMessage());
            }
        }
    }//GEN-LAST:event_menuSenoActionPerformed

    private void rotacionSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_rotacionSliderStateChanged
        ventanaInterna vi = (ventanaInterna) (escritorioTrabajo.getSelectedFrame());
    
        if (vi != null && imgFuente != null) {
            try{
                double r = Math.toRadians(rotacionSlider.getValue());
                Point p = new Point(imgFuente.getWidth()/2, imgFuente.getHeight()/2);
                AffineTransform at = AffineTransform.getRotateInstance(r,p.x,p.y);
                AffineTransformOp atop;
                
                atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
                BufferedImage imgDest = atop.filter(imgFuente, null);

                vi.getLienzo().setImagen(imgDest);
                vi.getLienzo().repaint();
            }catch(IllegalArgumentException e){
                System.err.println(e.getLocalizedMessage());
            }
        }
    }//GEN-LAST:event_rotacionSliderStateChanged

    private void senoBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_senoBotonActionPerformed
        ventanaInterna vi = (ventanaInterna) (escritorioTrabajo.getSelectedFrame());
    
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImagen();
            try{
                double w = 180.0 / 255.0;
                LookupTable lt;
                
                lt=imagenUtils.seno(w);
                
                LookupOp lkop = new LookupOp(lt, null);
                
                lkop.filter(imgSource, imgSource);

                vi.getLienzo().setImagen(imgSource);
                vi.getLienzo().repaint();
            }catch(IllegalArgumentException e){
                System.err.println(e.getLocalizedMessage());
            }
        }
    }//GEN-LAST:event_senoBotonActionPerformed

    private void rotacionSliderFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_rotacionSliderFocusGained
        ventanaInterna vi = (ventanaInterna)(escritorioTrabajo.getSelectedFrame());
        
        if(vi!=null){
            ColorModel cm = vi.getLienzo().getImagen().getColorModel();
            WritableRaster raster = vi.getLienzo().getImagen().copyData(null);
            boolean alfaPre = vi.getLienzo().getImagen().isAlphaPremultiplied();
        
            imgFuente = new BufferedImage(cm,raster,alfaPre,null);
        }
    }//GEN-LAST:event_rotacionSliderFocusGained

    private void rotacionSliderFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_rotacionSliderFocusLost
        imgFuente = null;
        rotacionSlider.setValue(0);
    }//GEN-LAST:event_rotacionSliderFocusLost

    private void colorCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorCBActionPerformed
        ventanaInterna vi;
        
        vi = (ventanaInterna)escritorioTrabajo.getSelectedFrame();

        if(vi != null){
            vi.getLienzo().setColor((Color) colorCB.getSelectedItem());
        }
        
    }//GEN-LAST:event_colorCBActionPerformed

    private void rotacion90BotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotacion90BotonActionPerformed
        ventanaInterna vi;
        
        vi = (ventanaInterna)escritorioTrabajo.getSelectedFrame();

        if(vi != null){
            BufferedImage imgSource =  vi.getLienzo().getImagen();
          
            if(imgSource != null){
                BufferedImage imgDest = aplicarRotacion(imgSource, 90);
                
                vi.getLienzo().setImagen(imgDest);
                vi.getLienzo().repaint();
            }
        }
    }//GEN-LAST:event_rotacion90BotonActionPerformed

    private void rotacion180BotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotacion180BotonActionPerformed
        ventanaInterna vi;
        
        vi = (ventanaInterna)escritorioTrabajo.getSelectedFrame();

        if(vi != null){
            BufferedImage imgSource =  vi.getLienzo().getImagen();
          
            if(imgSource != null){
                BufferedImage imgDest = aplicarRotacion(imgSource, 180);
                
                vi.getLienzo().setImagen(imgDest);
                vi.getLienzo().repaint();
            }
        }
    }//GEN-LAST:event_rotacion180BotonActionPerformed

    private void rotacion270BotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotacion270BotonActionPerformed
        ventanaInterna vi;
        
        vi = (ventanaInterna)escritorioTrabajo.getSelectedFrame();

        if(vi != null){
            BufferedImage imgSource =  vi.getLienzo().getImagen();
          
            if(imgSource != null){
                BufferedImage imgDest = aplicarRotacion(imgSource, 270);
                
                vi.getLienzo().setImagen(imgDest);
                vi.getLienzo().repaint();
            }
        }
    }//GEN-LAST:event_rotacion270BotonActionPerformed

    private void aumentarBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aumentarBotonActionPerformed
        ventanaInterna vi = (ventanaInterna) (escritorioTrabajo.getSelectedFrame());
    
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImagen();
            try{
                BufferedImage imgDest = aplicarEscalado(imgSource, 1.25);

                vi.getLienzo().setImagen(imgDest);
                vi.getLienzo().repaint();
            }catch(IllegalArgumentException e){
                System.err.println(e.getLocalizedMessage());
            }
        }
    }//GEN-LAST:event_aumentarBotonActionPerformed

    private void disminuirBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disminuirBotonActionPerformed
        ventanaInterna vi = (ventanaInterna) (escritorioTrabajo.getSelectedFrame());
    
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImagen();
            try{
                BufferedImage imgDest = aplicarEscalado(imgSource, 0.75);

                vi.getLienzo().setImagen(imgDest);
                vi.getLienzo().repaint();
            }catch(IllegalArgumentException e){
                System.err.println(e.getLocalizedMessage());
            }
        }
    }//GEN-LAST:event_disminuirBotonActionPerformed

    private void combinarBandasMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combinarBandasMenuActionPerformed
        this.descomponerEnBandas();
    }//GEN-LAST:event_combinarBandasMenuActionPerformed

    private void descomponerBandasBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_descomponerBandasBotonActionPerformed
        this.descomponerEnBandas();
    }//GEN-LAST:event_descomponerBandasBotonActionPerformed

    private void espacioColorCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_espacioColorCBActionPerformed
        this.cambiarEspacioColor((String) espacioColorCB.getSelectedItem());
    }//GEN-LAST:event_espacioColorCBActionPerformed

    private void convertirColorMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convertirColorMenuActionPerformed
        this.cambiarEspacioColor("YCC");
    }//GEN-LAST:event_convertirColorMenuActionPerformed

    private void convolucionCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_convolucionCBActionPerformed
        this.aplicarConvolucion(convolucionCB.getSelectedIndex());
    }//GEN-LAST:event_convolucionCBActionPerformed

    public void setPosicionText(String str){
        mousePosicionText.setText(str);
    }

    private void aplicarConvolucion(int filtro) {
        ventanaInterna vi = (ventanaInterna) (escritorioTrabajo.getSelectedFrame());
    
        if (vi != null) {
            BufferedImage imgSource = vi.getLienzo().getImagen();
            try{
               Kernel mascara = null;
               
               switch(filtro){
                    case 0:
                        mascara = KernelProducer.createKernel(KernelProducer.TYPE_MEDIA_3x3);
                        break;
                    case 1:
                        mascara = KernelProducer.createKernel(KernelProducer.TYPE_BINOMIAL_3x3);
                        break;
                    case 2:
                        mascara = KernelProducer.createKernel(KernelProducer.TYPE_ENFOQUE_3x3);
                        break;
                    case 3:
                        mascara = KernelProducer.createKernel(KernelProducer.TYPE_RELIEVE_3x3);
                        break;
                    case 4:
                        mascara = KernelProducer.createKernel(KernelProducer.TYPE_LAPLACIANA_3x3);
                        break;
               }
               
               ConvolveOp cop = new ConvolveOp(mascara);

                BufferedImage imgdest = cop.filter(imgSource, null);

                vi.getLienzo().setImagen(imgdest);
                vi.getLienzo().repaint();
            }catch(IllegalArgumentException e){
                System.err.println(e.getLocalizedMessage());
            }
        }
    }
    
    public class FocusManagerListener implements PropertyChangeListener {
        @Override
        public void propertyChange(PropertyChangeEvent e) {
            ventanaInterna vi;
            vi = (ventanaInterna)escritorioTrabajo.getSelectedFrame();

            Lienzo2D lienzo = null;

            if(vi != null)
                lienzo = vi.getLienzo();

            String herramienta;

            if(lienzo != null){
                editarHerramienta.setSelected(lienzo.getEditar());

                alisadoHerramienta.setSelected(lienzo.getAlisar());

                rellenoHerramienta.setSelected(lienzo.getRelleno());
                
                transparenciaHerramienta.setSelected(lienzo.getTransparencia());


                grosorSpinner.setValue(lienzo.getGrosor());

                if(!lienzo.getEditar()){
                    herramienta = lienzo.getHerramienta();

                    switch(herramienta){
                        case "punto":
                            puntoHerramienta.setSelected(true);
                            break;
                        case "linea":
                            lineaHerramienta.setSelected(true);
                            break;
                        case "rectangulo":
                            rectanguloHerramienta.setSelected(true);
                            break;
                        case "elipse":
                            elipseHerramienta.setSelected(true);
                            break;
                    }
                }
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem abrirArchivo;
    private javax.swing.JButton abrirArchivoBoton;
    private javax.swing.JToggleButton alisadoHerramienta;
    private javax.swing.JMenu archivoMenu;
    private javax.swing.JPanel atributosPanel;
    private javax.swing.JButton aumentarBoton;
    private javax.swing.JToolBar barraHerramientas;
    private javax.swing.JPanel barraInferior;
    private javax.swing.JMenuBar barraMenu;
    private javax.swing.JPanel brilloPanel;
    private javax.swing.JSlider brilloSlider;
    private javax.swing.JMenuItem cambiarTamMenu;
    private javax.swing.JComboBox<String> colorCB;
    private javax.swing.JMenuItem combinarBandasMenu;
    private javax.swing.JButton contrasteNormalBoton;
    private javax.swing.JPanel contrastePanel;
    private javax.swing.JMenuItem convertirColorMenu;
    private javax.swing.JComboBox<String> convolucionCB;
    private javax.swing.JButton descomponerBandasBoton;
    private javax.swing.JButton disminuirBoton;
    private javax.swing.JToggleButton editarHerramienta;
    private javax.swing.JToggleButton elipseHerramienta;
    private javax.swing.JPanel escaladoPanel;
    private javax.swing.JDesktopPane escritorioTrabajo;
    private javax.swing.JComboBox<String> espacioColorCB;
    private javax.swing.JPanel espacioColorPanel;
    private javax.swing.JPanel filtroPanel;
    private javax.swing.JSpinner grosorSpinner;
    private javax.swing.ButtonGroup grupoHerramientas;
    private javax.swing.JMenuItem guardarArchivo;
    private javax.swing.JButton guardarArchivoBoton;
    private javax.swing.JLabel herramientaText;
    private javax.swing.JButton iluminarBoton;
    private javax.swing.JMenu imagenMenu;
    private javax.swing.JPanel infoPanel;
    private javax.swing.JButton jButton1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JToolBar.Separator jSeparator5;
    private javax.swing.JToggleButton lineaHerramienta;
    private javax.swing.JMenuItem menuBrillo;
    private javax.swing.JMenuItem menuConvolucion;
    private javax.swing.JMenuItem menuLookUp;
    private javax.swing.JMenuItem menuSeno;
    private javax.swing.JLabel mousePosicionText;
    private javax.swing.JMenuItem nuevoArchivo;
    private javax.swing.JButton nuevoArchivoBoton;
    private javax.swing.JButton oscurecimientoBoton;
    private javax.swing.JToggleButton puntoHerramienta;
    private javax.swing.JToggleButton rectanguloHerramienta;
    private javax.swing.JToggleButton rellenoHerramienta;
    private javax.swing.JButton rotacion180Boton;
    private javax.swing.JButton rotacion270Boton;
    private javax.swing.JButton rotacion90Boton;
    private javax.swing.JPanel rotacionPanel;
    private javax.swing.JSlider rotacionSlider;
    private javax.swing.JButton senoBoton;
    private javax.swing.JPanel senoPanel;
    private javax.swing.JToggleButton transparenciaHerramienta;
    private javax.swing.JCheckBoxMenuItem verBarraAtributos;
    private javax.swing.JCheckBoxMenuItem verBarraEstado;
    private javax.swing.JCheckBoxMenuItem verBarraFormas;
    private javax.swing.JMenu verMenu;
    // End of variables declaration//GEN-END:variables
}
